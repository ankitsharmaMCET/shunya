[{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/IDEEA-dev.html","id":"build-electric-power-system-model","dir":"Articles","previous_headings":"","what":"Build electric power system model","title":"IDEEA","text":"","code":"mod <- ideea_modules$model_reg7 %>%   add(     ideea_modules$energy$COA,     ideea_modules$energy$SUP_COA,     ideea_modules$energy$GAS,     ideea_modules$energy$SUP_GAS,     ideea_modules$energy$IMP_GAS,     ...,     ideea_modules$electricity   )  mod <- setMilestoneYears(mod, start = 2050)"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/IDEEA-dev.html","id":"solve-base-scenario","dir":"Articles","previous_headings":"","what":"Solve base scenario","title":"IDEEA","text":"","code":"# base scenario (no policy) scen_base <- solve(mod) summary(scen_base)"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/IDEEA-dev.html","id":"policy-scenarios","dir":"Articles","previous_headings":"","what":"Policy scenarios","title":"IDEEA","text":"","code":"scen_CO2_tax <- add(mod, ideea_modules$policy$CO2_tax) %>% solve()  scen_CO2_cap <- add(mod, ideea_modules$policy$CO2_cap) %>% solve()   scen_SOX_cap ..."},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/IDEEA-dev.html","id":"reports","dir":"Articles","previous_headings":"","what":"Reports","title":"IDEEA","text":"","code":"report_scenario(scen_CO2_tax, file = \"scen_CO2_tax.pdf\", format = \"pdf\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/about.html","id":"founding-members","dir":"Articles","previous_headings":"","what":"Founding Members","title":"IDEEA team and community","text":"Dr Balachandra Patil, Chief Research Scientist, Department Management Studies, Indian Institute Science, Bengaluru Dr Joyashree Roy, Founder Director, South Southeast Asia Multidisciplinary Research Network Transforming Societies Global South (SMARTS), Asian Institute Technology, Bangkok, Representing Global Change Program, Jadavpur University, Kolkata Parthaa Bosu, Principal, Domain Functional Advisory LLP (DFAG) Lead Advisor – India, Environmental Defense Fund (EDF) Dr Oleg Lugovoy, Lead Senior Economist, EDF","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/about.html","id":"ideea-team","dir":"Articles","previous_headings":"","what":"IDEEA team","title":"IDEEA team and community","text":"[ToDo: arrange alphabetical order? position/roles] Jadavpur University Joyashree Roy, Founder Director, South Southeast Asia Multidisciplinary Research Network Transforming Societies Global South (SMARTS), Asian Institute Technology, Bangkok, Represents Global Change Program, Jadavpur University Anupam Debsarkar, Professor, Department Civil Environmental Engineering Sourish Chatterjee Arijit Mukherjee Piku Sen Prantika Sarkar Biswajit Thakur Biswanath Roy Indian Institute Science Abhishek Das Manjunath M Samridh Sharma Varun Jyothiprakash Balachandra Patil EDF Parthaa Bosu, Principal, Domain Functional Advisory LLP (DFAG) Lead Advisor Lavanya Padhi, Advisor, Program Coordinator Oleg Lugovoy, Lead Senior Economist","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/about.html","id":"reviewers","dir":"Articles","previous_headings":"","what":"Reviewers","title":"IDEEA team and community","text":"Dr Tarun Sharma, Assistant Professor, Indian Institute Technology, Roorkee, Uttarakhand Mitavachan Hiremath, Co-founder Director, Centre Sustainability (SusPoT), Bengaluru","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/about.html","id":"list-of-projectsstudies","dir":"Articles","previous_headings":"","what":"List of projects/studies","title":"IDEEA team and community","text":"Link main website","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/data.html","id":"generating-capacity","dir":"Articles","previous_headings":"","what":"Generating capacity","title":"IDEEA: open datasets","text":"Global Power Plant Database https://datasets.wri.org/dataset/globalpowerplantdatabase v1.3.0 Power plants location fuel capacity Source: WRI.","code":"ggplot(get_ideea_map(nreg = 36, offshore = T, islands = T, ROW = T)) +   geom_sf() +   geom_point(aes(longitude, latitude, color = primary_fuel, size = capacity_mw),               data = pp, alpha = .5) +   scale_color_viridis_d(option = \"H\", direction = -1) +   # theme_bw() +   labs(x = \"\", y = \"\") +   theme_void()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/data.html","id":"demand-load-curve","dir":"Articles","previous_headings":"","what":"Demand, load curve","title":"IDEEA: open datasets","text":"","code":"load_2019_MWh <- ideea_data$load_2019_MWh %>%   mutate(     datetime = timeslices::tsl2dtm(slice, tmz = \"Asia/Kolkata\", year = 2019),     YDAY = timeslices::tsl2yday(slice),     HOUR = timeslices::tsl2hour(slice),     .after = \"slice\"   )  ggplot(load_2019_MWh) +   geom_line(aes(HOUR, MWh/1e3, color = YDAY, group = YDAY), alpha = .25) +   scale_color_viridis_c(option = \"H\", limits = c(1, 365)) +   facet_wrap(~reg36, ncol = 4, scales = \"free_y\") +   labs(y = \"GWh\", x = \"hour\") +   theme_bw() ggsave(\"load_2019_reg36.png\", width = 7, height = 9, path = \"tmp\")  load_2019_reg7 <- load_2019_MWh %>%    group_by(reg7, slice, datetime, YDAY, HOUR) %>%   summarise(MWh = sum(MWh, na.rm = T), .groups = \"drop\")   # mutate(   #   datetime = timeslices::tsl2dtm(slice, tmz = \"Asia/Kolkata\", year = 2019),   #   YDAY = timeslices::tsl2yday(slice),   #   HOUR = timeslices::tsl2hour(slice),   #   .after = \"slice\"   # )  ggplot(load_2019_reg7) +   geom_line(aes(HOUR, MWh/1e3, color = YDAY, group = YDAY), alpha = .25) +   scale_color_viridis_c(option = \"H\", limits = c(1, 365)) +   facet_wrap(~reg7, ncol = 1, scales = \"free_y\") +   labs(y = \"GWh\", x = \"hour\") +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/data.html","id":"wind-capacity-factors","dir":"Articles","previous_headings":"","what":"Wind capacity factors","title":"IDEEA: open datasets","text":"Wind capacity factors clusters (< 10% sd loss)","code":"library(merra2ools) #> Warning in fun(libname, pkgname): MERRA2 data directory is not found. #>  #>             Use '?set_merra' for help gis_sf <- get_ideea_map(36, offshore = T, islands = T)  ideea_locid <- get_locid(gis_sf) ideea_locid_sf <- get_merra2_grid(type = \"poly\", locid = ideea_locid)  wind_clusters <- get_ideea_data(name = \"merra_wind_clusters\", raw = T)   # Cluster 10% loss locid_win_cl_k <- wind_clusters %>%      filter(sd_loss <= .1) %>%      group_by(reg36_off) %>%      mutate(k_min = (k == min(k))) %>% ungroup() %>%      filter(k_min) %>% select(-k_min) %>%     as.data.table()  # Cluster-loss figure locid_win_cl_kk <- wind_clusters %>%   group_by(reg36_off, k) %>%   summarise(sd_loss = max(sd_loss), N = max(N), .groups = \"drop\")  locid_win_cl_k_i <- locid_win_cl_k %>%   group_by(reg36_off, k) %>%   summarise(sd_loss = max(sd_loss), N = max(N), .groups = \"drop\")  a <- ggplot(locid_win_cl_kk) +   geom_line(aes(k, sd_loss), color = \"dodgerblue\", linewidth = 1.5) +   geom_point(aes(k, sd_loss), color = \"red\", data = locid_win_cl_k_i) +   scale_y_continuous(labels = scales::percent, limits = c(0, NA)) +   # scale_x_continuous(breaks = rev_integer_breaks(5)) +   labs(x = \"Number of clusters (k)\",         y = \"loss, % of s.d.\",        title = \"Aggregation lossess by number of clusters\") +   facet_wrap(~paste0(reg36_off, \" (\", N,\" locations)\"), scales = \"free\",              ncol = max(1, round(36 / 5))) +   theme_bw()  ideea_wind_sf <- ideea_locid_sf %>%   full_join(locid_win_cl_k) %>%   filter(!is.na(k)) %>%   left_join(select(merra2ools::mean_cf, locid, starts_with(\"waf\"))) %>%   group_by(reg36_off, cluster) %>%   summarise(     wcf100m = mean(waf100m, na.rm = T),     area_km2 = sum(area)   )  fig.wind.clusters <- ggplot() +   geom_sf(data = gis_sf) +   geom_sf(aes(fill = wcf100m), data = ideea_wind_sf, color = alpha(\"white\", .75)) +   geom_sf(data = gis_sf, fill = NA, color = alpha(\"black\", 1)) +   scale_fill_viridis_c(option = \"D\", name = \"CF\", limits = c(.1, NA)) +   theme_map()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/data.html","id":"solar-capacity-factors","dir":"Articles","previous_headings":"","what":"Solar capacity factors","title":"IDEEA: open datasets","text":"Solar capacity factors clusters (< 1% sd loss) Potential sites deploy wind power plants, onshore offshore, installed capacity (MW) Source: NREL, Global Wind Atlas.","code":"library(merra2ools) gis_sf <- get_ideea_map(36, offshore = T, islands = T)  ideea_locid <- get_locid(gis_sf) ideea_locid_sf <- get_merra2_grid(type = \"poly\", locid = ideea_locid)  sol_clusters <- get_ideea_data(name = \"merra_solar_clusters\", raw = T)   # Cluster 10% loss locid_sol_cl_k <- sol_clusters %>%      filter(sd_loss <= .01) %>%      group_by(reg36_off) %>%      mutate(k_min = (k == min(k))) %>% ungroup() %>%      filter(k_min) %>% select(-k_min) %>%     as.data.table()  # Cluster-loss figure locid_sol_cl_kk <- sol_clusters %>%   group_by(reg36_off, k) %>%   summarise(sd_loss = max(sd_loss), N = max(N), .groups = \"drop\")  locid_sol_cl_k_i <- locid_sol_cl_k %>%   group_by(reg36_off, k) %>%   summarise(sd_loss = max(sd_loss), N = max(N), .groups = \"drop\")  a <- ggplot(locid_sol_cl_kk) +   geom_line(aes(k, sd_loss), color = \"dodgerblue\", linewidth = 1.5) +   geom_point(aes(k, sd_loss), color = \"red\", data = locid_sol_cl_k_i) +   scale_y_continuous(labels = scales::percent, limits = c(0, NA)) +   # scale_x_continuous(breaks = rev_integer_breaks(5)) +   labs(x = \"Number of clusters (k)\",         y = \"loss, % of s.d.\",        title = \"Aggregation lossess by number of clusters\") +   facet_wrap(~paste0(reg36_off, \" (\", N,\" locations)\"), scales = \"free\",              ncol = max(1, round(36 / 5))) +   theme_bw()   ideea_sol_sf <- ideea_locid_sf %>%   full_join(locid_sol_cl_k) %>%   filter(!is.na(k)) %>%   left_join(select(merra2ools::mean_cf, locid, starts_with(\"saf_\"))) %>%   mutate(area = as.numeric(st_area(geometry))/1e6) %>%   group_by(reg36_off, cluster) %>%   summarise(     scf_tl = mean(saf_tl, na.rm = T),     sol_MW_max = sum(sol_MW_max, na.rm = T),     area_km2 = sum(area, na.rm = T)   )  fig.sol.clusters <- ggplot() +   geom_sf(data = gis_sf) +   geom_sf(aes(fill = scf_tl), data = ideea_sol_sf, color = alpha(\"white\", .75)) +   geom_sf(data = gis_sf, fill = NA, color = alpha(\"black\", 1)) +   scale_fill_viridis_c(option = \"B\", name = \"CF\", limits = c(.2, NA)) +   theme_map() # ggsave(\"vignets/images/fig.sol.clusters.\") ggplot() +   # geom_sf(data = ideea_maps$ROW$ROW$sf, inherit.aes = F) +   geom_sf(fill = \"wheat\", data = ideea_maps$r34$land$sf, inherit.aes = F) +   geom_point(aes(Longitude, Latitude, color = as.logical(`Is Offshore`)),               size = .1, data = nrel_wind_locations, alpha = .15, show.legend = F) +   scale_color_brewer(palette = \"Set1\") +   geom_point(aes(longitude, latitude, size = capacity_mw),               data = filter(pp, primary_fuel == \"Wind\"),               alpha = .75, inherit.aes = F, color = \"blue\", shape = 1) +   scale_size_continuous(range = c(.05, 3)) +   theme_bw() +   labs(x = \"\", y = \"\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/data.html","id":"time-resolution","dir":"Articles","previous_headings":"","what":"Time resolution","title":"IDEEA: open datasets","text":"","code":"tsl_sets <- timeslices::tsl_sets$d365_h24 %>%   mutate(     slice = paste(YDAY, HOUR, sep = \"_\")   )   # Subsets  ## 1. one day per month library(lubridate) yday_mid_month <-    paste0(\"d\",           formatC(yday(ymd(paste(\"2023\", 1:12, 15, sep = \"-\"))),                   width = 3, flag = \"0\")          ) yday_mid_month  # yday_365 <- unique(tsl_sets$YDAY)  tsl_levels <- list(   ANNUAL = \"ANNUAL\",   YDAY = timeslices::tsl_levels$d365_h24$YDAY,   HOUR = timeslices::tsl_levels$d365_h24$HOUR ) names(tsl_levels)  time_sets <- list(   tsl_sets = tsl_sets,    tsl_levels = tsl_levels,    yday_mid_month = yday_mid_month )  save(time_sets, file = \"data-raw/time_sets.RData\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"configuration","dir":"Articles","previous_headings":"","what":"Configuration","title":"IDEEA: Electric power sector model","text":"","code":"nreg <- 7 # number of regions offshore <- FALSE # TRUE/FALSE islands <- FALSE # time resolution base_year <- 2020 days_in_year <- 12 # representative day per month # days_in_year <- 365 # full year  # model_horizon # technologies:  \"all\" or \"selected\" # wind_data_source # solar_data_source library(tidyverse) library(data.table) library(IDEEA.dev) library(glue) # remotes::install_github(\"energyRt/timeslices\")  regN <- glue(\"reg\", nreg) regN_off <- paste0(regN, \"_off\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"regions","dir":"Articles","previous_headings":"Configuration","what":"Regions","title":"IDEEA: Electric power sector model","text":"","code":"gis_sf <- get_ideea_map(nreg, offshore = T, reg_off = T) plot(gis_sf[\"reg_off\"], key.width = lcm(4))  # aggregating data (!!!write a function) agg36toN <- get_ideea_map(46, offshore = T, rename = F, islands = T) %>%    st_drop_geometry() %>%   select(reg36, all_of(regN), offshore) %>% unique() %>%   mutate(reg36_off = if_else(offshore, paste0(reg36, \"_off\"), reg36))  agg36toN[[regN_off]] <- if_else(agg36toN$offshore,                                  paste0(agg36toN[[regN]], \"_off\"),                                  agg36toN[[regN]])"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"time-resolution","dir":"Articles","previous_headings":"Configuration","what":"Time resolution","title":"IDEEA: Electric power sector model","text":"","code":"# full 24x365 sets tsl_levels <- ideea_modules$time_scales$tsl_levels tsl_sets <- ideea_modules$time_scales$tsl_sets  # subsets if (days_in_year == 365) {   # full set (8760h)   YDAY_SUBSET <- tsl_levels$YDAY   SLICE_SUBSET <- tsl_sets$slice } else if (days_in_year == 12) {   # 12 representative days, mid-months   YDAY_SUBSET <- ideea_modules$time_scales$yday_mid_month   # time-slices levels   tsl_levels$YDAY <- YDAY_SUBSET   # time-slices sets, full table   tsl_sets <- tsl_sets %>% filter(YDAY %in% YDAY_SUBSET)   SLICE_SUBSET <- tsl_sets$slice } else {   stop(\"Unsupported value in 'days_in_year': \", days_in_year) }  print(\"Subannual time resolution:\") print(paste(\"   Total number of days a year:\", length(YDAY_SUBSET))) print(paste(\"   Total number of hours per year:\", length(SLICE_SUBSET)))"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"model-horizon","dir":"Articles","previous_headings":"Configuration","what":"Model horizon","title":"IDEEA: Electric power sector model","text":"base year milestone years, horizon","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"commodities","dir":"Articles","previous_headings":"Configuration","what":"Commodities","title":"IDEEA: Electric power sector model","text":"","code":"# energy ELC <- newCommodity(   name = \"ELC\",    description = \"Electricity\",   unit = \"GWh\",    slice = \"HOUR\" )  # # using saved data from `energy` module # COA <- ideea_modules$energy$COA # GAS <- ideea_modules$energy$GAS # BIO <- ideea_modules$energy$BIO  # emissions CO2 <- newCommodity(   name = \"CO2\",    description = \"Carbon emissions\",   unit = \"kt\",   slice = \"ANNUAL\" )  NOX <- newCommodity(   name = \"NOX\",    description = \"Nitrogen oxide emissions NOx\",   unit = \"kt\",   slice = \"ANNUAL\" )  SOX <- newCommodity(   name = \"SOX\",    description = \"Sulfur oxide emissions SOx\",   unit = \"kt\",   slice = \"ANNUAL\" )  PM <- newCommodity(   name = \"PM\",    description = \"Particulate matter (particle pollution)\",   unit = \"kt\",   slice = \"ANNUAL\" )  REN <- newCommodity(   name = \"REN\",   description = \"Generic renewable energy\",   unit = \"GWh\",   slice = \"ANNUAL\" )  repo_comm <- newRepository(name = \"repo_comm\",                             description = \"Electricity & emissions commodity\") %>%   add(ELC, CO2, NOX, SOX, PM)"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"finalexogenous-demand","dir":"Articles","previous_headings":"Configuration > Demand options","what":"Final/exogenous demand","title":"IDEEA: Electric power sector model","text":"class demand groups demand (split sectors)","code":"# dat <- ideea_data$elc_consumption %>% #   left_join(agg36toN) %>% #   rename(region = matches(regN)) %>% #   group_by(region, year) %>% #   summarise( #     GWh = sum(GWh, na.rm = T) #   ) %>% #   filter(year == base_year)  dat <- ideea_data$load_2019_MWh %>%   filter(slice %in% SLICE_SUBSET) %>%   select(all_of(c(\"reg36\", \"slice\", \"MWh\"))) %>%   left_join(filter(agg36toN, !offshore), by = c(reg36 = \"reg36\")) %>%   rename(reg_off = ends_with(regN_off), region = ends_with(regN)) %>%   mutate(year = base_year) %>%   group_by(region, reg_off, year, slice) %>%   summarise(     GWh = sum(MWh, na.rm = T)/1e3, # correction for representative day     .groups = \"drop\"   )   # demand adjustment for representative (sampled) hours  # making the total equal annual dem_adj <- sum(ideea_data$load_2019_MWh$MWh) / 1e3 / sum(dat$GWh)  DEMELC <- newDemand(   name = \"DEMELC\",   description = \"Fixed, flat houlry electric demand by region\",   commodity = \"ELC\",   unit = ELC@unit,   dem = data.frame(     region = dat$region,     # year = dat$year,     slice = dat$slice, # dropping to assign to all hours     dem = dat$GWh * dem_adj   ) )"},{"path":[]},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"energy","dir":"Articles","previous_headings":"Configuration > Supply & resources","what":"Energy","title":"IDEEA: Electric power sector model","text":"domestic reserves, mining, costs, import/export","code":"repo_supply <- newRepository(   name = \"repo_supply\",    description = \"Energy supply (markets)\") %>%   add(# from energy module     # coal     ideea_modules$energy$COA, # commodity     ideea_modules$energy$SUP_COA, # supply     ideea_modules$energy$IMP_COA,  # import      # natural gas     ideea_modules$energy$GAS,     ideea_modules$energy$SUP_GAS,     ideea_modules$energy$IMP_GAS,     # oil     ideea_modules$energy$OIL,     ideea_modules$energy$SUP_OIL,     ideea_modules$energy$IMP_OIL,     # biomass     ideea_modules$energy$BIO,     ideea_modules$energy$RES_BIO, # domestic resource of biomass     #      REN, # all type of non-fuel (renewable) energy     newSupply(\"RES_REN\", commodity = \"REN\"),     overwrite = F   )"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"carbon-sink-aquifers","dir":"Articles","previous_headings":"Configuration > Supply & resources","what":"Carbon sink / aquifers","title":"IDEEA: Electric power sector model","text":"potential CO2 storage, volume, locations","code":""},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"solar","dir":"Articles","previous_headings":"Configuration > Capacity factors","what":"Solar","title":"IDEEA: Electric power sector model","text":"NREL, MERRA2, (ERA5), potential location","code":"# if (!exists(\"tmp/merra_solar.RData\")) { #   library(merra2ools) #   tol <- 1 #   # Select clusters based on parameters #   locid_sol_cl_k <- ideea_data$merra_solar_clusters %>%  #     filter(sd_loss <= tol) %>%  #     group_by(reg36_off) %>%  #     mutate(k_min = (k == min(k))) %>% ungroup() %>%  #     filter(k_min) %>% select(-k_min) %>% #   # locid_sol_cl_k <- locid_sol_cl_k %>% # 1 cluster - to test #     left_join(agg36toN) %>% #     rename(reg_off = matches(regN_off), region = any_of(regN)) %>% #     group_by(region, reg_off, offshore, locid, cluster) %>% #     summarise( #       sol_GW_max = round(sum(sol_MW_max/1e3, na.rm = T), 2), #       .groups = \"drop\" #     ) %>% #     as.data.table() #   unique(locid_sol_cl_k$cluster) #   # aggregate #   merra_solar <- ideea_data$merra_raw_2014 %>%  #     fPOA(array.type = c(\"fh\", \"fl\",  #                         # \"th\", \"tv\", # rarely used & similar to other types #                         \"tl\", \"td\")) %>% # solar (Plain of Array irradiance) #     mutate( #       # simplified version of capacity factors,  #       # assuming pick of output when POA >= 1000 Watt/m^2 #       scf_fh = round(POA.fh / 1e3, 3), #       scf_fl = round(POA.fl / 1e3, 3), #       # scf_th = round(POA.th / 1e3, 3), #       # scf_tv = round(POA.tv / 1e3, 3), #       scf_tl = round(POA.tl / 1e3, 3), #       scf_td = round(POA.td / 1e3, 3) #     ) %>% #     mutate( #       # curtail cf > 1 (when POA > 1kW/m^2) #       scf_fh = if_else(scf_fh > 1, 1, scf_fh), #       scf_fl = if_else(scf_fl > 1, 1, scf_fl), #       # scf_th = if_else(scf_th > 1, 1, scf_th), #       # scf_tv = if_else(scf_tv > 1, 1, scf_tv), #       scf_tl = if_else(scf_tl > 1, 1, scf_tl), #       scf_td = if_else(scf_td > 1, 1, scf_td) #     ) %>% #     select(locid, UTC, starts_with(\"scf_\")) #    #   merra_solar <- merra_solar %>% #     left_join(locid_sol_cl_k, relationship = \"many-to-many\") %>% #     filter(!is.na(region)) %>% #     filter(!offshore) %>% #     group_by(UTC, region, reg_off, offshore, cluster) %>% #     summarise( #       scf_fh = weighted.mean(scf_fh, sol_GW_max, na.rm = T), #       scf_fl = weighted.mean(scf_fl, sol_GW_max, na.rm = T), #       scf_tl = weighted.mean(scf_tl, sol_GW_max, na.rm = T), #       scf_td = weighted.mean(scf_td, sol_GW_max, na.rm = T), #       .groups = \"drop\" #     ) #    #   merra_solar <- merra_solar %>% #     mutate( #       # datetime = ,  #       slice = timeslices::dtm2tsl(lubridate::with_tz(UTC, \"Asia/Kolkata\")), #       .before = 1 #     )  #   save(merra_solar, file = \"tmp/merra_solar.RData\") # } else { #   load(\"tmp/merra_solar.RData\") # }  merra_solar <- ideea_data$merra_solar_cf_reg7 %>%   filter(slice %in% SLICE_SUBSET) %>%   rename(region = reg7_off) %>%   filter(region %in% gis_sf$region)  WSOL <- newWeather(   name = \"WSOL\",   description = \"Solar capacity factors, tilted tracking system (tl)\",   region = unique(merra_solar$region),   slice = \"HOUR\",   weather = data.frame(     region = merra_solar$region,     slice = merra_solar$slice,     # year = NA # all years     wval = merra_solar$scf_tl   ) )"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"wind","dir":"Articles","previous_headings":"Configuration > Capacity factors","what":"Wind","title":"IDEEA: Electric power sector model","text":"NREL, MERRA2, (ERA5), potential location","code":"# if (!exists()) { #   tol <- 1 #   # Select clusters based on parameters #   locid_win_cl_k <- ideea_data$merra_wind_clusters %>%  #     filter(sd_loss <= tol) %>%  #     group_by(reg36_off) %>%  #     mutate(k_min = (k == min(k))) %>% ungroup() %>%  #     filter(k_min) %>% select(-k_min) %>% #     left_join(agg36toN) %>% #     rename(reg_off = matches(regN_off), region = any_of(regN)) %>% #     group_by(region, reg_off, offshore, locid, cluster) %>% #     summarise( #       win_GW_max = sum(area, na.rm = T) , #       .groups = \"drop\" #     ) %>% #     mutate( #       win_GW_max = round(convert(\"m^2/MW\", \"km^2/GW\", 1000) / 14 * win_GW_max, 2) #     ) %>% #     as.data.table()   #   unique(locid_win_cl_k$cluster) # } else { #    # }  merra_wind <- ideea_data$merra_wind_cf_reg7 %>%   filter(slice %in% SLICE_SUBSET) %>%   rename(region = reg7_off) %>%   filter(region %in% gis_sf$region)  WWIN <- newWeather(   name = \"WWIN\",   description = \"Onshore wind 100m height\",   region = unique(merra_wind$region),   slice = \"HOUR\",   weather = data.frame(     region = merra_wind$region,     slice = merra_wind$slice,     # year = NA # same for all years     wval = merra_wind$wcf100m   ) )"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"hydro","dir":"Articles","previous_headings":"Configuration > Capacity factors","what":"Hydro","title":"IDEEA: Electric power sector model","text":"current capacity, seasonality, day/night","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"generating-technologies","dir":"Articles","previous_headings":"Configuration","what":"Generating technologies","title":"IDEEA: Electric power sector model","text":"description total capacity, region, map","code":"# load(\"data-raw/wri_sf.RData\") # cap_sf <- ideea_data$generators %>%  #   # st_drop_geometry() #   group_by(reg_off, primary_fuel) %>% #   summarise( #     capacity_mw = sum(capacity_mw, na.rm = T), .groups = \"drop\" #   ) # plot(cap_sf[2])  # cap_sf %>%  #   st_drop_geometry() %>% #   left_join() # (load(\"data-raw/wri_reg46.RData\")) # wri_reg46 # ideea_data$gencap_sf <- wri_reg46 cap <- ideea_data$generators %>%   # left_join(ideea_data$reg_tbl) %>%   group_by(across(all_of(regN)), offshore, mainland, primary_fuel) %>%   summarize(     capacity_mw = sum(capacity_mw, na.rm = T),     .groups = \"drop\"   ) %>%   mutate(region = .data[[regN]], .before = 1) %>%   select(-all_of(regN)) # ideea_r36_sf <- get_ideea_map(36, T, T) # gis_sf  cap_sf <- gis_sf %>%   right_join(cap) %>%   filter(!is.na(primary_fuel))    ggplot() +   geom_sf(data = gis_sf, fill = \"grey\") +   geom_sf(aes(fill = capacity_mw/1e3), data = cap_sf) +   scale_fill_viridis_c(option = \"H\", name = \"GW\", trans = \"log10\") +   facet_wrap(~primary_fuel) +   theme_bw() +   theme(     #panel.background = element_rect(fill = \"aliceblue\"),     # panel.grid = element_line(color = \"white\", size = 0.8),     axis.ticks = element_blank(),     axis.text = element_blank()) ggsave(\"tmp/wri_installed_capacity.png\", width = 6, height = 7,         scale = 1.25)  # cap7 <- wri_reg46 %>% #   left_join(ideea_data$reg_tbl) %>% #   group_by(reg7, primary_fuel) %>% #   summarize( #     capacity_mw = sum(capacity_mw, na.rm = T) #   ) #  # ideea_r7_sf <- get_ideea_map(7, T, T) #  # cap7_sf <- ideea_r7_sf %>% #   left_join(cap7, by = c(\"reg_off\" = \"reg7\")) %>% #   filter(!is.na(primary_fuel)) #  # ggplot() + #   geom_sf(data = ideea_r7_sf, fill = \"grey\") + #   geom_sf(aes(fill = capacity_mw/1e3), data = cap7_sf) + #   scale_fill_viridis_c(option = \"H\", name = \"GW\", trans = \"log10\") + #   facet_wrap(~primary_fuel) + #   theme_bw() # ggsave(\"tmp/wri_installed_capacity_r7.png\", width = 6, height = 7,  #        scale = 1.25)  cap$primary_fuel %>% unique()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"coal-fired","dir":"Articles","previous_headings":"Configuration > Generating technologies","what":"Coal-fired","title":"IDEEA: Electric power sector model","text":"WRI dataset, new - BAT","code":"cap_coa <- cap %>%   filter(grepl(\"Coal\", primary_fuel)) %>%   filter(!offshore) %>%   mutate(year = 2020, .before = 1)  # assume retirement of 2020 capacity by 2030 cap_coa_2030 <- cap_coa %>%   mutate(year = 2030, capacity_mw = 0.8 * capacity_mw)  # assume retirement of 2020 capacity by 2030 cap_coa_2040 <- cap_coa %>%   mutate(year = 2040, capacity_mw = 0.1 * capacity_mw)  # combine cap_coa <- cap_coa %>%    bind_rows(cap_coa_2030) %>%   bind_rows(cap_coa_2040) # Note: the existing capacity will be linearly interpolated from 2020 to 2040 # cap = 0 after 2040  # load coal technology (assume Super-critical for all existing capacity) ECOASUP_2020 <- ideea_modules$techs$ECOASUP@data$ECOASUP_2020 class(ECOASUP_2020)   # update base-year technology with preexisting capacity ECOASUP_2020 <- ECOASUP_2020 %>%   update(stock = data.frame(     region = cap_coa$region,     year = cap_coa$year,     stock = cap_coa$capacity_mw / 1e3 # in GW   ))  # load most advanced coal techs for new investment ECOA <- ideea_modules$techs$ECOAULT %>% # ultra-super-critical    add(ECOASUP_2020) # add tech with existing capacity names(ECOA@data)  draw(ECOA@data$ECOASUP_2020) draw(ECOA@data$ECOAULT_2040)"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"natural-gas","dir":"Articles","previous_headings":"Configuration > Generating technologies","what":"Natural gas","title":"IDEEA: Electric power sector model","text":"","code":"cap_gas <- cap %>%   filter(grepl(\"Coal\", primary_fuel)) %>%   filter(!offshore) %>%   mutate(year = 2020, .before = 1)  # assume retirement of 2020 capacity by 2030 cap_gas_2030 <- cap_gas %>%   mutate(year = 2030, capacity_mw = 0.8 * capacity_mw)  # assume retirement of 2020 capacity by 2030 cap_gas_2040 <- cap_gas %>%   mutate(year = 2040, capacity_mw = 0.1 * capacity_mw)  # combine cap_gas <- cap_gas %>%    bind_rows(cap_gas_2030) %>%   bind_rows(cap_gas_2040) # Note: the existing capacity will be linearly interpolated from 2020 to 2040 # cap = 0 after 2040  # load coal technology (assume Super-critical for all existing capacity) ENGCC_2020 <- ideea_modules$techs$ENGCC@data$ENGCC_2020 class(ENGCC_2020)   # update base-year technology with preexisting capacity ENGCC_2020 <- ENGCC_2020 %>%   update(stock = data.frame(     region = cap_gas$region,     year = cap_gas$year,     stock = cap_gas$capacity_mw / 1e3 # in GW   ))  # load most advanced coal techs for new investment EGAS <- ideea_modules$techs$ENGCC %>% # ultra-super-critical    add(ENGCC_2020, overwrite = T) # add tech with existing capacity names(EGAS@data)  draw(EGAS@data$ENGCC_2020) # draw(ECOA@data$ENGCC_2040)"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"solar-1","dir":"Articles","previous_headings":"Configuration > Generating technologies","what":"Solar","title":"IDEEA: Electric power sector model","text":"existing - WRI dataset","code":"# solar capacity in ~2020 cap_sol <- cap %>%   filter(grepl(\"Solar\", primary_fuel)) %>%   mutate(year = 2020, .before = 1)  # assume retirement of 2020 capacity by 2030 cap_sol_2030 <- cap_sol %>%   mutate(year = 2030, capacity_mw = 0.8 * capacity_mw)  # assume further retirement by 2040 cap_sol_2040 <- cap_sol %>%   mutate(year = 2040, capacity_mw = 0.1 * capacity_mw)  # combine cap_sol <- cap_sol %>%    bind_rows(cap_sol_2030) %>%   bind_rows(cap_sol_2040) # Note: the existing capacity will be linearly interpolated from 2020 to 2040 # cap = 0 after 2040  # load repository with solar technologies ESOL <- ideea_modules$techs$ESOL class(ESOL) # repository with solar techs names(ESOL@data)  # update base-year technology with preexisting capacity ESOL@data$ESOL_2020 <- ESOL@data$ESOL_2020 %>%   update(stock = data.frame(     region = cap_sol$region,     year = cap_sol$year,     stock = cap_sol$capacity_mw / 1e3 # in GW   ))  # add weather factor name and parameter for each technology ESOL@data <- lapply(ESOL@data, function(tech) update(   tech,   weather = data.frame(weather = \"WSOL\", waf.fx = 1),   input = list(comm = \"REN\", combustion = 0) )) names(ESOL@data) ESOL@data$ESOL_2020@weather  ESOL@data$ESOL_2020 %>% draw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"wind-1","dir":"Articles","previous_headings":"Configuration > Generating technologies","what":"Wind","title":"IDEEA: Electric power sector model","text":"existing - WRI dataset","code":"cap_win <- cap %>%   filter(grepl(\"Wind\", primary_fuel)) %>%   mutate(year = 2020, .before = 1)  # assume retirement of 2020 capacity by 2030 cap_win_2030 <- cap_win %>%   mutate(year = 2030, capacity_mw = 0.8 * capacity_mw)  # assume further retirement by 2040 cap_win_2040 <- cap_win %>%   mutate(year = 2040, capacity_mw = 0.1 * capacity_mw)  # combine cap_win <- cap_win %>%    bind_rows(cap_win_2030) %>%   bind_rows(cap_win_2040) # Note: the existing capacity will be linearly interpolated from 2020 to 2040 # cap = 0 after 2040  # load repository with wind technologies EWIN <- ideea_modules$techs$EWIN class(EWIN) # repository with wind techs names(EWIN@data)  # update base-year technology with preexisting capacity EWIN@data$EWIN_2020 <- EWIN@data$EWIN_2020 %>%   update(stock = data.frame(     region = cap_win$region,     year = cap_win$year,     stock = cap_win$capacity_mw / 1e3 # in GW   ))  # add weather factor name and parameter for each technology EWIN@data <- lapply(EWIN@data, function(tech) update(   tech,   weather = data.frame(weather = \"WSOL\", waf.fx = 1),   input = list(comm = \"REN\", combustion = 0) )) names(EWIN@data) EWIN@data$EWIN_2020@weather  EWIN@data$EWIN_2020 %>% draw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"hydro-1","dir":"Articles","previous_headings":"Configuration > Generating technologies","what":"Hydro","title":"IDEEA: Electric power sector model","text":"existing - WRI dataset, new?","code":"cap_hyd <- cap %>%   filter(grepl(\"Hydro\", primary_fuel)) %>%   filter(!offshore) %>%   mutate(year = 2020, .before = 1)  # assume retirement of 2020 capacity by 2030 cap_hyd_2030 <- cap_hyd %>%   mutate(year = 2030, capacity_mw = 1 * capacity_mw)  # assume retirement of 2020 capacity by 2030 cap_hyd_2040 <- cap_hyd %>%   mutate(year = 2060, capacity_mw = 1 * capacity_mw)  # combine cap_hyd <- cap_hyd %>%    bind_rows(cap_hyd_2030) %>%   bind_rows(cap_hyd_2040) # Note: the existing capacity will be linearly interpolated from 2020 to 2040 # cap = 0 after 2040  # load base-year technology  EHYD_2020 <- ideea_modules$techs$EHYD@data$EHYD_2020 class(EHYD_2020)   # update base-year technology with preexisting capacity EHYD_2020 <- EHYD_2020 %>%   update(stock = data.frame(     region = cap_hyd$region,     year = cap_hyd$year,     stock = cap_hyd$capacity_mw / 1e3 # in GW   ))  EHYD <- ideea_modules$techs$EHYD %>% #     add(EHYD_2020, overwrite = T) # add tech with existing capacity names(EHYD@data)  draw(EHYD@data$EHYD_2020)"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"ccs","dir":"Articles","previous_headings":"Configuration > Generating technologies","what":"CCS","title":"IDEEA: Electric power sector model","text":"studies India? Costs CCS potential storage?","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"nuclear","dir":"Articles","previous_headings":"Configuration > Generating technologies","what":"Nuclear","title":"IDEEA: Electric power sector model","text":"WRI dataset, new?","code":"cap_nuc <- cap %>%   filter(grepl(\"Nuclear\", primary_fuel)) %>%   filter(!offshore) %>%   mutate(year = 2020, .before = 1)  # assume retirement of 2020 capacity by 2030 cap_nuc_2030 <- cap_nuc %>%   mutate(year = 2030, capacity_mw = 1 * capacity_mw)  # assume retirement of 2020 capacity by 2030 cap_nuc_2040 <- cap_nuc %>%   mutate(year = 2060, capacity_mw = 1 * capacity_mw)  # combine cap_nuc <- cap_nuc %>%    bind_rows(cap_nuc_2030) %>%   bind_rows(cap_nuc_2040) # Note: the existing capacity will be linearly interpolated from 2020 to 2040 # cap = 0 after 2040  # load coal technology (assume Super-critical for all existing capacity) ENUC_2020 <- ideea_modules$techs$ENUC@data$ENUC_2020 class(ENUC_2020)   # update base-year technology with preexisting capacity ENUC_2020 <- ENUC_2020 %>%   update(stock = data.frame(     region = cap_nuc$region,     year = cap_nuc$year,     stock = cap_nuc$capacity_mw / 1e3 # in GW   ))  # load most advanced coal techs for new investment ENUC <- ideea_modules$techs$ENUC %>% # ultra-super-critical    add(ENUC_2020, overwrite = T) # add tech with existing capacity names(ENUC@data)  draw(ENUC@data$ENUC_2020)"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"bio-energy","dir":"Articles","previous_headings":"Configuration > Generating technologies","what":"Bio energy","title":"IDEEA: Electric power sector model","text":"bio-reactors, agricultural waste/residue","code":"cap_bio <- cap %>%   filter(grepl(\"Biomass\", primary_fuel)) %>%   filter(!offshore) %>%   mutate(year = 2020, .before = 1)  # assume retirement of 2020 capacity by 2030 cap_bio_2030 <- cap_bio %>%   mutate(year = 2030, capacity_mw = 1 * capacity_mw)  # assume retirement of 2020 capacity by 2030 cap_bio_2040 <- cap_bio %>%   mutate(year = 2060, capacity_mw = 1 * capacity_mw)  # combine cap_bio <- cap_bio %>%    bind_rows(cap_bio_2030) %>%   bind_rows(cap_bio_2040) # Note: the existing capacity will be linearly interpolated from 2020 to 2040 # cap = 0 after 2040  # load base-year technology  EBIO_2020 <- ideea_modules$techs$EBIO@data$EBIO_2020 class(EBIO_2020)   # update base-year technology with preexisting capacity EBIO_2020 <- EBIO_2020 %>%   update(stock = data.frame(     region = cap_bio$region,     year = cap_bio$year,     stock = cap_bio$capacity_mw / 1e3 # in GW   ))  EBIO <- ideea_modules$techs$EBIO %>% #     add(EBIO_2020, overwrite = T) # add tech with existing capacity names(EBIO@data)  draw(EBIO@data$EBIO_2020)"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"energy-storage","dir":"Articles","previous_headings":"Configuration","what":"Energy storage","title":"IDEEA: Electric power sector model","text":"","code":"# ideea_modules$techs"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"transmission","dir":"Articles","previous_headings":"Configuration","what":"Transmission","title":"IDEEA: Electric power sector model","text":"","code":"transmission_5x5 <- ideea_data$transmission_5x5 %>%   filter(scenario == \"current\", !is.na(MW)) %>%   rename(dst = destination) %>%   filter(!duplicated(MW)) # temporary solution  gis_mainland_sf <- filter(gis_sf, offshore == F, mainland == T) points_coord <- st_centroid(gis_mainland_sf) %>%   st_coordinates() %>%   as.data.frame() %>%   cbind(data.frame(region = gis_mainland_sf$region)) %>%   rename(lon = X, lat = Y)  a <- transmission_5x5 %>%   # filter(scenario == \"current\") %>%   left_join(points_coord, by = c(\"region\" = \"region\")) %>%   left_join(points_coord, by = c(\"dst\" = \"region\")) %>%   mutate(GW = MW/1000)  ggplot() +   geom_sf(data = gis_sf, fill = \"wheat\") +   geom_segment(aes(x = lon.x, y = lat.x, xend = lon.y, yend = lat.y, linewidth = GW),                color = \"dodgerblue\", lineend = \"round\",                data = filter(a, scenario == \"current\")) +   geom_segment(aes(x = lon.x, y = lat.x, xend = lon.y, yend = lat.y),                color = alpha(\"white\", .5), lineend = \"round\",                data = filter(a, scenario == \"new\")) +   geom_point(aes(lon, lat), data = points_coord, color = \"red\") +   labs(x = \"\", y = \"\") +   theme_bw()    network <- transmission_5x5 %>%   filter(scenario == \"current\") %>%   mutate(     trd_name = paste(\"TRD\", region, dst, sep = \"_\")   ) %>%   rename(     region.x = region,     region.y = dst   )  repo_transmission <- newRepository(\"transmission\") if (nrow(network) > 0) {   for (i in 1:nrow(network)) {     trd <- newTrade(       name = network$trd_name[i],       # description = network$lines_type[i],       commodity = \"ELC\",       routes = data.frame(         src = c(network$region.x[i], network$region.y[i]),         dst = c(network$region.y[i], network$region.x[i])       ),       trade = data.frame(         src = c(network$region.x[i], network$region.y[i]),         dst = c(network$region.y[i], network$region.x[i]),         teff = rep(1 - .1, 2)       ),       capacityVariable = T,       invcost = data.frame(         # costs can be assigned to one of the connected region or both         # here we split the costs, 50% for each region         region = c(network$region.x[i], network$region.y[i]),         invcost = rep(1000, 2) * 2 # olife == 2       ),       olife = 50, # doubled annualized invcost for consistency        stock = data.frame(         # year =          stock = network$MW[i]       ),       cap2act = 24*365     )     repo_transmission <- add(repo_transmission, trd)     rm(trd)   } } names(repo_transmission@data)"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"current-policies","dir":"Articles","previous_headings":"Configuration","what":"Current policies","title":"IDEEA: Electric power sector model","text":"carbon emissions, climate, air quality, SOx, NOx, PM, etc. * national * state, local regulations electric power sector","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"model","dir":"Articles","previous_headings":"Configuration","what":"Model","title":"IDEEA: Electric power sector model","text":"","code":"repo <- newRepository(\"repo\") %>%   add(     # commodities     # ELC, COA, CO2, NOX, SOX,     repo_comm,     # supply & import     repo_supply,     # Generating technologies     ECOA,     EGAS,     # ENUC,     EHYD,     ESOL, WSOL,     EWIN, WWIN,     # transmission     repo_transmission,     # demand     DEMELC   ) length(repo@data) names(repo@data)  # model-class object  mod <- newModel(   name = 'IDEEA_r7_test',    description = \"IDEEA example model\",   ## in case of infeasibility, `dummy` variables can be added   # debug = data.frame(#comm = \"ELC\",   #                    dummyImport = 1e6,   #                    dummyExport = 1e6),   region = unique(gis_sf$region),   discount = 0.05,   slice = tsl_levels,   repository = repo)  # Check the model time-slices mod@sysInfo@slice@levels %>% as.data.table()  # Set milestone-years # mdl <- setMilestoneYears(mdl, start = 2015, interval = c(1, 2, 5, 6, 7, rep(10, 3))) # mdl <- setMilestoneYears(mdl, start = baseYear, interval = c(1, diff(modYears))) mod <- setMilestoneYears(mod, start = base_year,                           interval = c(1))                          # interval = c(1, 3, 4, 5, 5, 5, 5, 5)) mod@sysInfo@milestone # check"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"scenario","dir":"Articles","previous_headings":"Configuration","what":"Scenario","title":"IDEEA: Electric power sector model","text":"","code":"scen_gms <- solve(mod, name = \"IDEEA_test\", trim = F,                solver = GAMS_custom,               # solver = \"GAMS\",               tmp.dir = file.path(\"tmp\", \"GAMS\"))  if (F) {   scen <- interpolate(mod, name = \"IDEEA_toy\", trim = F)      scen <- write(scen, solver = GAMS_custom,                  tmp.dir = file.path(\"tmp\", \"GAMS\"))      scen@misc$tmp.dir    solve(scen, wait = F)   scen <- read(scen) } summary(scen_gms) save(scen_gms, file = \"data-raw/scenarios/scen_gms_reg7_8760h_1y.RData\") save(scen_gms,       file = \"data-raw/scenarios/scen_gms_reg7_8760h_2020-2050.RData\") solver_jl <- list(   # cmdline = \"/Applications/Julia-1.9.app/Contents/Resources/julia/bin/julia energyRt.jl\",   cmdline = \"/Applications/Julia-1.6.app/Contents/Resources/julia/bin/julia energyRt.jl\",   lang = \"JuMP\",    # solver = \"Cbc\"   solver = \"HiGHS\" )  scen_jl <- solve(mod, name = \"IDEEA_r7_h288_jl\", solver = solver_jl,                   tmp.dir = file.path(\"tmp\", \"JuMP\")) summary(scen_jl)  if (F) {   # alternative step-by-step, manual (for lare models)   scen <- interpolate(mod, name = \"IDEEA_toy\", trim = F)   scen_jl <- write(scen,     solver = solver_jl,    tmp.dir = file.path(\"tmp\", \"JuMP\")   )   scen_jl@misc$tmp.dir    scen_jl <- solve(scen_jl, wait = T)   scen_jl <- read(scen_jl)   summary(scen_jl) } summary(scen_jl) scen_jl@misc$time.log save(scen_jl,       file = \"data-raw/scenarios/scen_jl_reg7_8760h_2020-2050.RData\") Pyomo <- list(   cmdline = \"/Users/olmba/Library/r-miniconda-arm64/envs/switch/bin/python energyRt.py\",   lang = \"PYOMO\",   export_format = \"SQLite\",   # solver = \"cplex\"   # solver = \"glpk\"   solver = \"cbc\"   # solver = \"highs\" )  scen <- interpolate(mod, name = \"IDEEA_toy\", trim = F) scen_py <- write(scen,   solver = Pyomo,  tmp.dir = file.path(\"tmp\", \"Pyomo\") ) scen_py@misc$tmp.dir # setwd(scen_py@misc$tmp.dir) # use_condaenv(\"switch\") # conda_list() # system(\"/Users/olmba/Library/r-miniconda-arm64/envs/switch/bin/python energyRt.py\") # detach('package:reticulate', unload = TRUE) library(reticulate) use_condaenv(\"switch\") prj_dir <- getwd() setwd(scen_py@misc$tmp.dir) getwd() source_python(\"energyRt.py\", envir = new.env(\"ideea_py\")) setwd(prj_dir)  scen_py <- solve(scen_py, wait = T) scen_py <- read(scen_py) summary(scen_py)"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/electricity.html","id":"results","dir":"Articles","previous_headings":"Configuration","what":"Results","title":"IDEEA: Electric power sector model","text":"","code":"# scen <- list(gms = scen_gms, jl = scen_jl) # scen <- scen_jl scen <- scen_gms vTechCap <- getData(scen, \"vTechCap\", merge = T, drop.zeros = T) # vTechCap <-    getData(scen, \"vTechNewCap\", merge = T, drop.zeros = T)   getData(scen, name_ = \"NewCap\", merge = F, drop.zeros = T)   getData(scen, name_ = \"Trade\", merge = F, drop.zeros = T)    getData(scen, name_ = \"Row\", parameters = F,  merge = F, drop.zeros = T)    vTechCap_sf <- gis_sf %>%    filter(!offshore) %>%   left_join(vTechCap, by = c(reg_off = \"region\"))    ggplot(vTechCap_sf) +   geom_sf(aes(fill = value), na.rm = F) +   scale_fill_viridis_c(option = \"H\", name = \"GW\") +   facet_wrap(~tech) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/energy.html","id":"coal-and-lignite","dir":"Articles","previous_headings":"","what":"Coal and Lignite","title":"Primary energy sources","text":"India fifth largest proven coal reserves world. April,’2022 exploration carried maximum depth 1200m GSI, CMPDI, SCCL, MECL etc., cumulative total estimated coal reserve country per coal Inventory published GSI 361411.46 million tonnes (361.41 billion tonnes)[1]. total reserves coal rose 2.36% previous year discovery estimated 9.28 billion metric tons. 51.7% total coal reserves measured/proven, 40.7% indicated/probable, 7.48% inferred[1]. Coal deposits primarily found eastern south-central India. Jharkhand, Odisha Chhattisgarh accounted 68.88% India’s total known coal reserves. estimated total reserves lignite coal India 1 April 2021 46.02 billion metric tons (50.73 billion short tons), remaining unchanged previous year. largest lignite reserves present Tamil Nadu. 16% India’s lignite reserves proven, 56% indicated/probable, 28% inferred. production lignite 36.61 million metric tons (40.36 million short tons) 2020–21, decrease 13.04% previous fiscal. Production lignite declined CAGR 1.60% last 10 years. Consumption lignite stood 37.22 million metric tons (0.04103 billion short tons) 2020–21. Electricity generation alone accounts 84.46% total lignite consumption. significant consumers include paper industry (5.55%), cement industry (2.18%) textile industry (2.01%). Lignite consumption declined compound annual growth rate 1.30% previous decade. Lignite accounted 3.6% electricity generation 2020-21 [1]. Ministry Coal decided develop National Lignite Index facilitate auction lignite mines revenue share basis. concept base prices lignite similar National Coal Index developed Indian Statistical Institute, Kolkata [2]. ???model lignite independently??? Definition commodity supply Total coal reserves production 2021 state","code":"library(IDEEA.dev) library(sf) library(tidyverse) library(data.table) library(cowplot) library(ggthemes)  # load IDEEA map gis_sf <- get_ideea_map(nreg = 36, rename = F)  # create repository for energy-sector objects repo_energy <- newRepository(   name = \"repo_energy\",   description = \"Primary energy supply\" ) # definition of commodity COA <- newCommodity(   name = \"COA\",    description = \"Coal, all types\",   unit = \"GWh\",    slice = \"ANNUAL\",   emis = data.frame(     comm = \"CO2\",     unit = \"kt/GWh\",     emis = 0.33 # emissions from combustion of 1 unit   ),   misc = list(     emis_source = \"https://www.eia.gov/environment/emissions/co2_vol_mass.php\",     emis_conv = 'convert(\"kg/MMBtu\", \"kt/GWh\", 96)'   ) )  # loading and processing coal data coa_reserve <- get_ideea_data(name = \"coal\", nreg = 7, variable = \"reserve\") coa_sup <-    get_ideea_data(\"coal\", nreg = 7, \"production\") %>%   full_join(     get_ideea_data(\"coal\", nreg = 7, \"cost.+2020\", agg_fun = mean)   )  # define domestic supply of coal SUP_COA <- newSupply(   name = \"SUP_COA\",   description = \"Domestic coal supply, all grades\",   commodity = \"COA\",   unit = \"GWh\",   reserve = data.frame( # maximum      region = coa_reserve$reg7,     res.up = round(convert(\"Mtce\", \"GWh\", coa_reserve$total_reserve_Mt * .7))   ),   availability = data.frame(     region = coa_sup$reg7,     ava.up = round(convert(\"Mtce\", \"GWh\", coa_sup$production_2021 * .7), 0),     cost = signif(convert(\"USD/tce\", \"cr.INR/GWh\",                            coa_sup$cost_USD_t_2020 * .7), 3)   ) )  # import from other countries, makes supply of coal available in any region IMP_COA <- newImport(   name = \"IMP_COA\",   description = \"Import of coal from abroad\",   commodity = \"COA\",   unit = \"GWh\",   imp = data.frame(     region = NA, # all regions     price = 2 * mean(SUP_COA@availability$cost, na.rm = T) # assuming double costs   ) )  # saving the model objects in repository repo_energy <- add(repo_energy, COA, SUP_COA, IMP_COA)"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/energy.html","id":"oil","dir":"Articles","previous_headings":"","what":"Oil","title":"Primary energy sources","text":"Oil gas within energy mix play important role one third energy required met hydrocarbons. Growing economy population growth main drivers oil & gas demand increasing every year. Crude Oil Production year 2020-21 30.49 MMT. Import Crude Oil 196.46 MMT worth Rs 459779 Crores, Petroleum Products 43.25 MMT valued Rs. 109430 crores LNG 24.8 MMT valued Rs. 54850 crores, combinedly worth 21.4% country’s overall imports 2020-21. export Petroleum products 56.77 MMT valued Rs. 157168 crores 2020-21. Total oil reserves region","code":"# loading and processing oil data # get_ideea_data(name = \"oil\", raw = T) # check oil_reserve <- get_ideea_data(name = \"oil\", nreg = 7, variable = \"reserve\") oil_sup <-    oil_reserve %>%   full_join(     get_ideea_data(\"oil\", nreg = 7, \"cost\", agg_fun = mean)   ) %>%   filter(oil_reserve_Mt_2021 > 0) # Declaration of commodity OIL <- newCommodity(   name = \"OIL\",    description = \"Oil and products\",   unit = \"GWh\",    slice = \"ANNUAL\",   emis = data.frame(     comm = \"CO2\",     unit = \"kt/GWh\",     emis = 0.25 # emissions from combustion of 1 unit   ),   misc = list(     emis_source = \"https://www.eia.gov/environment/emissions/co2_vol_mass.php\",     emis_conv = 'convert(\"kg/MMBtu\", \"kt/GWh\", 74)'   ) )  # Declaration of domestic supply SUP_OIL <- newSupply(   name = \"SUP_OIL\",   description = \"Domestic oil supply\",   commodity = \"OIL\",   unit = \"GWh\",   reserve = data.frame(     region = oil_sup$reg7,     res.up = oil_sup$oil_reserve_GWh_2021   ),   availability = data.frame(     region = oil_sup$reg7,     ava.up = oil_sup$oil_reserve_GWh_2021 / 10, # assumption     cost = convert(\"USD/kWh\", \"cr.INR/GWh\", oil_sup$oil_cost_USD_kWh)   ) )  # Declaration of import from other countries,  # makes supply of oil available in any region IMP_OIL <- newImport(   name = \"IMP_OIL\",   description = \"Import of oil from abroad\",   commodity = \"OIL\",   unit = \"GWh\",   imp = data.frame(     region = NA, # all regions     price = 2 * mean(SUP_OIL@availability$cost, na.rm = T) # assuming double costs   ) )  # saving the model objects in repository repo_energy <- add(repo_energy, OIL, SUP_OIL, IMP_OIL) repo_energy@data %>% names() #> [1] \"COA\"     \"SUP_COA\" \"IMP_COA\" \"OIL\"     \"SUP_OIL\" \"IMP_OIL\""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/energy.html","id":"gas","dir":"Articles","previous_headings":"","what":"Gas","title":"Primary energy sources","text":"Government India determined promote usage natural gas, fuel feedstock across country, increase share primary energy mix around 6.7% 15% 2030 [1]. estimated CBM resources order 2600 BCM 91 Trillion TCF spread 11 states country. Natural Gas Production 2020-21 stood 28.67 BCM. Currently, 2575 sq. kms CBM resources available India. 280.357 BCM CBM, 112.63 BCM CBM recoverable reserves [2]. Total gas reserves region","code":"# loading and processing oil data get_ideea_data(name = \"gas\", raw = T) # check raw data #> # A tibble: 45 × 9 #>    reg36 reg36_off reg1  offshore name36            name1 gas_reserve_Bcm_2021 #>    <chr> <chr>     <chr> <lgl>    <chr>             <chr>                <dbl> #>  1 AP    AP        IND   FALSE    Andhra Pradesh    India                65.5  #>  2 AP    AP_off    IND   TRUE     Andhra Pradesh    India                NA    #>  3 AR    AR        IND   FALSE    Arunachal Pradesh India                 3.14 #>  4 AS    AS        IND   FALSE    Assam             India               167.   #>  5 BR    BR        IND   FALSE    Bihar             India                NA    #>  6 CH    CH        IND   FALSE    Chandigarh        India                NA    #>  7 CT    CT        IND   FALSE    Chhattisgarh      India                NA    #>  8 DD    DD        IND   FALSE    Daman and Diu     India                NA    #>  9 DD    DD_off    IND   TRUE     Daman and Diu     India                NA    #> 10 DL    DL        IND   FALSE    Delhi             India                NA    #> # ℹ 35 more rows #> # ℹ 2 more variables: gas_reserve_GWh_2021 <dbl>, gas_cost_USD_kWh <dbl> gas_reserve <- get_ideea_data(name = \"gas\", nreg = 7, variable = \"reserve\") gas_sup <-    # get_ideea_data(\"oil\", nreg = 7, \"production\") %>%   gas_reserve %>%   full_join(     get_ideea_data(\"gas\", nreg = 7, variable = \"cost\", agg_fun = mean)   ) %>%   filter(gas_reserve_Bcm_2021 > 0)  # Declaration of commodity GAS <- newCommodity(   name = \"GAS\",    description = \"Natural gas, all types\",   unit = \"GWh\",    slice = \"ANNUAL\",   emis = data.frame(     comm = \"CO2\",     unit = \"kt/GWh\",     emis = 0.18 # emissions from combustion of 1 unit    ),   misc = list(     emis_source = \"https://www.eia.gov/environment/emissions/co2_vol_mass.php\",     emis_conv = 'convert(\"kg/MMBtu\", \"kt/GWh\", 53)'   ) )  # Declaration of domestic supply SUP_GAS <- newSupply(   name = \"SUP_GAS\",   description = \"Domestic natural supply\",   commodity = \"GAS\",   unit = \"GWh\",   reserve = data.frame(     region = gas_sup$reg7,     res.up = gas_sup$gas_reserve_GWh_2021    ),   availability = data.frame(     region = gas_sup$reg7,     ava.up = gas_sup$gas_reserve_GWh_2021 / 10, # assumption     cost = convert(\"USD/kWh\", \"cr.INR/GWh\", gas_sup$gas_cost_USD_kWh)   ) )  # Declaration of import from other countries, # (makes supply of oil available in any region) IMP_GAS <- newImport(   name = \"IMP_GAS\",   description = \"Import of natural gas from abroad\",   commodity = \"GAS\",   unit = \"GWh\",   imp = data.frame(     region = NA, # all regions     price = 2 * mean(SUP_GAS@availability$cost, na.rm = T) # assuming double costs   ) )  # saving the model objects in repository repo_energy <- add(repo_energy, GAS, SUP_GAS, IMP_GAS, overwrite = F) repo_energy@data %>% names() #> [1] \"COA\"     \"SUP_COA\" \"IMP_COA\" \"OIL\"     \"SUP_OIL\" \"IMP_OIL\" \"GAS\"     #> [8] \"SUP_GAS\" \"IMP_GAS\""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/energy.html","id":"bio","dir":"Articles","previous_headings":"","what":"Bio","title":"Primary energy sources","text":"reference Centre Energy Studies Report (https://mnre.gov./img/documents/uploads/file_s- 1685625362098.pdf)) entitled “Evaluation Study Assessment Biomass Power Bagasse Cogeneration Potential Country”, total gross cropped area (TE-2015-2018) brought selected crops India around 198.11 m.ha, includes Kharif, rabi summer seasons acreage annual crops. Total production produced selected crops India level selected period around 774.38 million tonnes. total production, total biomass potential derived multiplying crop-specific Crop Residue Ratio (CRR) total production respective crops. calculated total available biomass potential India level reported around 754.50 million tonnes. total biomass production, specific portion biomass used domestic uses domestic fuel, feed cattle manure etc.; utilization rate biomass varied crop crop state state. found 2/3rd portion total biomass produced, .e., 525.98 million tonnes, utilized domestic uses consumption, whereas remaining 1/3rd portion resulted surplus biomass, .e., 228.52 million tonnes. , biomass power potential derived multiplying crop-specific power factor (derived Gross Heating Value) surplus biomass respective crop surplus biomass. estimated gross biomass power potential (TE-2015-2018) around 28445.52 MWe India level. lions share India biomass power potential contributed Punjab (10.6%), Uttar Pradesh (9.8%), followed Gujarat (9.3%), Maharashtra (9.2%), Madhya Pradesh (8.8%) Andhra Pradesh (7%). estimation biomass power potential 2019-20 calculated basis arrived power potential trends 2015-18. major contributing states biomass power potential Punjab, Uttar Pradesh, Gujarat, Maharashtra, Madhya Pradesh, Andhra Pradesh, Karnataka, West Bengal, Telangana, Tamil Nadu, whereas least potential states Union Territories Goa, Tripura, Arunachal Pradesh. projected biomass power potential India level based time series analysis (trend component) expected increase 30883.21 MWe, 32937.83 MWe, 35994.52 MWe Year 2020-21, 2025-26 2030-31, respectively. increase biomass power potential may contributed increased area production different crops change cropping pattern, utilization residual biomass farm level. Total bio reserves region","code":"# loading and processing data # get_ideea_data(name = \"biomass\", raw = T) # check raw data bio_sup <- get_ideea_data(name = \"biomass\", nreg = 7, variable = \"max_MWe\") %>%   filter(max_MWe > 0)  # Declaration of commodity BIO <- newCommodity(   name = \"BIO\",    description = \"Biomass, all types\",   unit = \"GWh\",    slice = \"ANNUAL\"   # emis = data.frame(   #   comm = \"PM25\",   #   unit = \"kt/GWh\",   #   emis = 0.1   # ) )  # Declaration of domestic supply RES_BIO <- newSupply(   name = \"RES_BIO\",   description = \"Local biomass resource\",   commodity = \"BIO\",   unit = \"GWh\",   availability = data.frame(     region = bio_sup$reg7,     ava.up = bio_sup$max_MWe * 8760 * .5 / .35, # assuming 50% load & 35% efficiency     cost = .01 # cr.INR/GWh   ) )  # saving the model objects in repository repo_energy <- add(repo_energy, BIO, RES_BIO) repo_energy@data %>% names() #>  [1] \"COA\"     \"SUP_COA\" \"IMP_COA\" \"OIL\"     \"SUP_OIL\" \"IMP_OIL\" \"GAS\"     #>  [8] \"SUP_GAS\" \"IMP_GAS\" \"BIO\"     \"RES_BIO\""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/energy.html","id":"wind","dir":"Articles","previous_headings":"","what":"Wind","title":"Primary energy sources","text":"per National Institute Wind Energy (NIWE), installable wind potential India 50 m, 80m, 100 m 120m ground level 49130 MW, 102788 MW 302251 MW respectively [2, 3]. commercially exploitable wind potential 200 GW. Currently, total installed capacity wind India around 41 GW .e., 20% total commercially exploitable potential [4]. Tamil Nādu, Gujarat, Karnataka, Rajasthan & Maharashtra top 5 wind energy potential states [5]. India also blessed 7600 km coast line estimated -shore wind potential around 194 GW. Coastal area Gujarat coastline Rameshwaram Kanyakumari offer offshore wind potential almost around 71GW [6, 7]. wind speed available -mentioned coastal areas around 7 m/s – 9m/s [8]. capital cost investment required 1 MW wind power plant installation around 5 – 5.5 Crores levelized cost generation around INR 2-3. [9].","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/energy.html","id":"solar","dir":"Articles","previous_headings":"","what":"Solar","title":"Primary energy sources","text":"Solar power Generation India 67 GW[6] accounts 16% total power generation India. Financial Year 2022-23, total 102 Billion Units[7] Solar power generated. total potential solar power India estimated 748GW. However estimates solar power based used land assumptions current state technology. National Solar Mission launched 2010 promote ecological sustainable growth addressing India’s energy security challenges. also constitute major contribution India global effort meet challenges climate change. Mission’s objective establish India global leader solar energy creating policy conditions solar technology diffusion across country quickly possible.[11] policy target 100 GW installed capacity Solar power India 2022, achieved installed capacity 62GW 2022. estimated 2026, 100 GW solar power installed India can become net exporter Solar power[12].","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/energy.html","id":"hydro","dir":"Articles","previous_headings":"","what":"Hydro","title":"Primary energy sources","text":"India, hydroelectric plants categorised large hydro (>25MW) small hydro (≤25MW). Government authorities conduct periodic studies estimating potential large hydro plants. Data large hydro potential, capacity operation capacity construction till March 2023 collated [https://pib.gov./PressReleasePage.aspx?PRID=1909276] installed capacity small hydro plants till June 2023 obtained [https://mnre.gov./img/documents/uploads/file_s-1689077131891.pdf]. Construction hydro projects typically involve long construction periods due sites prone geological surprises. makes difficult determine unified levelized price varies project project. However, large hydro projects installed last years, average price observed work INR 5.42 per kWh [https://energy.economictimes.indiatimes.com/news/power/reviving-indias-sleeping-energy-giant-hydro-pumped-hydro-power/97294420] ???expansion plans hydro???","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/energy.html","id":"nuclear","dir":"Articles","previous_headings":"","what":"Nuclear","title":"Primary energy sources","text":"summarize existing planned projects normally included optimizationhttps://www.world-nuclear.org/information-library/country-profiles/countries-g-n/india.aspx","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/growth.html","id":"gdp-growth","dir":"Articles","previous_headings":"","what":"GDP growth","title":"Growth and demand scenarios","text":"Historic projections [references]","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/growth.html","id":"electric-demand-scenarios","dir":"Articles","previous_headings":"","what":"Electric demand scenarios","title":"Growth and demand scenarios","text":"Historic 2000-2022 (total region available) Projections (2050-2070) scenarios * scenario 1 * scenario 2 * … [references]","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/hydrogen.html","id":"green-hydrogen","dir":"Articles","previous_headings":"","what":"Green hydrogen","title":"IDEEA: hydrogen technologies","text":", balancing features hydrogen India - strategy","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/install.html","id":"python","dir":"Articles","previous_headings":"Optimization software options","what":"Python","title":"IDEEA model installation","text":"Version Python, compatible Cbc HiGHS solvers? Options: Pre-installed Conda environment Pre-installed Python Install Python/Moniconda R ## option 1: miniconda","code":"library(reticulate) install_miniconda() miniconda_path() conda_list() conda_create(\"switch\") conda_install(\"switch\", \"switch_model\", forge = T) conda_install(\"switch\", \"ggplot\", forge = T) conda_install(\"switch\", \"coincbc\", forge = T) conda_install(\"switch\", \"rpy2\", forge = T) conda_install(\"switch\", \"scipy\", forge = T) conda_install(\"switch\", \"glpk\", forge = T) conda_install(\"switch\", \"highs\", forge = T) conda_install(\"switch\", \"datetime\", forge = T) conda_install(\"switch\", \"time\", forge = T) conda_install(\"switch\", \"itertools\", forge = T) conda_install(\"switch\", \"pandas\", forge = T) conda_install(\"switch\", \"sqlite3\", forge = T)   use_condaenv(\"switch\") ?source_python source_python(\"energyRt.py\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/install.html","id":"julia","dir":"Articles","previous_headings":"Optimization software options","what":"Julia","title":"IDEEA model installation","text":"","code":"julia println(\"Julia Version: \", VERSION) import Pkg Pkg.add(\"JuMP\") Pkg.add(\"HiGHS\") Pkg.add(\"Cbc\") Pkg.add(\"Clp\") # Pkg.add(\"CPLEX\") # link to pre-installed CPLEX # Pkg.add(\"Gurobi\") # link to pre-installed Gurobi Pkg.add(\"RData\") Pkg.add(\"RCall\") Pkg.add(\"CodecBzip2\") Pkg.add(\"Gadfly\") Pkg.add(\"DataFrames\") Pkg.add(\"CSV\") Pkg.add(\"SQLite\") Pkg.add(\"Dates\") # Pkg.status(\"JuMP\") Pkg.status()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/install.html","id":"gams","dir":"Articles","previous_headings":"Optimization software options","what":"GAMS","title":"IDEEA model installation","text":"…","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/install.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"IDEEA model installation","text":"(sources download datasets put )","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps.html","id":"region-map-only-mainland","dir":"Articles","previous_headings":"","what":"1-region map only mainland","title":"maps","text":"states union territories (except islands)considered single region.one simplest among inter regional trade considered. 1 region map: mainland","code":"ideea_maps$r1$mainland$sf %>% plot()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps.html","id":"region-map-mainland-with-islands","dir":"Articles","previous_headings":"","what":"1-region map: mainland with islands","title":"maps","text":"two major islands (Andaman & Nicobar Lakshadweep) included mainland. 1 region map: mainland islands","code":"ideea_maps$r1$with_islands$sf %>% plot()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps.html","id":"region-map-without-off-shores","dir":"Articles","previous_headings":"","what":"5-region map without off-shores","title":"maps","text":"5 Region Details  Plotting 5 Region Map 5 region map without -shore","code":"r5_land<-ideea_maps$r5$land$sf code<-r5_land$reg5 zone<-r5_land$name5 df<-data.frame(code,zone) knitr::kable(df, format = \"html\") ggplot(ideea_maps$r5$land$sf) +   geom_sf(aes(fill = reg5)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps.html","id":"region-map-with-off-shores","dir":"Articles","previous_headings":"","what":"5-region map with off-shores","title":"maps","text":"five regions along -shores included. -shore regions mainly included eastern, western southern region. 5 Region -shore: Details  Plotting 5 Region Map offshore 5 region map -shore","code":"r5_land_withoffshore<-ideea_maps$r5$with_offshores$sf code<-r5_land_withoffshore$reg5 region<-r5_land_withoffshore$reg_off locid<-r5_land_withoffshore$locid df<-data.frame(code,region,locid) knitr::kable(df, format = \"html\") ggplot(ideea_maps$r5$with_offshores$sf) +   geom_sf(aes(fill = reg5)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps.html","id":"region-map-without-off-shores-1","dir":"Articles","previous_headings":"","what":"34-region map without off-shores","title":"maps","text":"state considered region total 34 regions considered. 34 Region Details  Plotting 34 Region Map 34 region map without -shore","code":"r34_land<-ideea_maps$r34$land$sf code<-r34_land$reg34 state<-r34_land$name34 df<-data.frame(code,state) knitr::kable(df, format = \"html\") ggplot(ideea_maps$r34$land$sf) +   geom_sf(aes(fill = reg34)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps.html","id":"region-map-with-off-shores-1","dir":"Articles","previous_headings":"","what":"34-region map with off-shores","title":"maps","text":"34 regions along -shores included. -shore regions mainly included coastal states like West Bengal, Kerala, Gujrat etc. 34 Region -shore: Details  Plotting 34 Region Map offshore 34 region map -shore NOTE: similar way 7 region 32 region map can created","code":"r34_land_withoffshore<-ideea_maps$r34$with_offshores$sf code<-r34_land_withoffshore$reg34 state<-r34_land_withoffshore$reg_off df<-data.frame(code,state) knitr::kable(df, format = \"html\") ggplot(ideea_maps$r34$with_offshores$sf) +   geom_sf(aes(fill = reg34)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps.html","id":"will-be-deleted","dir":"Articles","previous_headings":"","what":"Will be deleted","title":"maps","text":"","code":"# ideea_maps # class(ideea_maps) # names(ideea_maps) # ideea_maps[[\"1r\"]]$mainland$sf %>% plot() # ideea_maps[[\"1r\"]]$mainland$sf # ideea_maps$`5r`$with_offshores$sf %>% plot() # ideea_maps$`5r`$with_offshores$sf"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"regions","dir":"Articles","previous_headings":"","what":"REGIONS","title":"IDEEA MAPS ","text":"India, union states, Sovereign, Secular, Democratic Republic Parliamentary system Government.According States Reorganization Act 1956, states India organized based linguistic lines.28 states 8 Union territories country.  modelling framework provision modify number sub-regions. Initially GIS map 46 different regions given following table used. 46 regions (r46) states union territories alterations. 46 region map Daman Diu considered two separate region. Moreover districts Puducherry considered separate region. Actually,Union territory Puducherry comprises erstwhile French colonies viz. Puducherry, Karaikal, Mahe Yanam. Puducherry Karaikal regions surrounded State Tamilnadu, whereas Mahe surrounded State Kerala Yanam state Andra Pradesh. However, 36 region (r36) map different areas Puducherry (PY.1 - PY.9) clubbed together separate region called Puducherry (PY). Similarly,Daman (DM) Diu (DU) merged single region Daman Diu (DD). following table clearly depicts administrative area considered r46, r36, r34,r32,r7 r5.","code":"#> Loading required package: energyRt #> Loading required package: parallel #>  #>  Loading package: energyRt  #>  Energy systems modeling toolbox in R  #>  Version: 0.01.25-dev (development version from GitHub)  #>   <http://www.energyrt.org>  #>  #>  #> Attaching package: 'energyRt' #> The following object is masked from 'package:base': #>  #>     write"},{"path":[]},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"build-ideea-dev","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > Step-1","what":"Build IDEEA.dev","title":"IDEEA MAPS ","text":"Build package (IDEEA.dev) RStudio:   Build/Install Restart tabs one four sub-screens RStudio, appears r-package projects. Alternatively, can install command line devtools::build() create source file package can used installation package file (Tools/Install package/… choose file).","code":""},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"install-the-packages-asp-bsf-ctidyverse-dggplot2","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > Step-2","what":"Install the packages a)sp b)sf c)tidyverse d)ggplot2","title":"IDEEA MAPS ","text":"packages can installed directly CRAN webpage R environment, using command. install.packages(“Package Name”) Example: installing sf package: install.packages(“sf”)","code":""},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"loadstart-the-installed-packages","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > Step-3","what":"Load/start the installed packages","title":"IDEEA MAPS ","text":"library(Package Name)","code":"library(IDEEA.dev) library(sp) library(sf) library(IDEEA.dev) library(tidyverse) library(ggplot2) library(insight) library(dplyr)"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"select-no-of-sub-region-mainland-and-offshore","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > Step-4","what":"Select No of Sub-region, mainland and offshore","title":"IDEEA MAPS ","text":"Ideea model offers flexibility divide entire administrative area different sub-region.present user can select among r1 (One region), r5 (five region) , r7(seven region), r32 (32 region)r34(34 region). mainland mainland -shores can selected separately sub-regional topology.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"region-map-without-off-shores","dir":"Articles","previous_headings":"STEPS TO CREATE MAP","what":"34-region map without off-shores","title":"IDEEA MAPS ","text":"state considered region total 34 regions considered. Different small areas Puducherry merged surrounding states. Daman Diu merged Gujrat.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"details-of-34-region","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 34-region map without off-shores","what":"Details of 34 Region","title":"IDEEA MAPS ","text":"","code":"r34_land <- ideea_maps$r34$land$sf code <- r34_land$reg34 state <- r34_land$name34 df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-34-region-map","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 34-region map without off-shores","what":"Plotting 34 Region Map","title":"IDEEA MAPS ","text":"34 region map without -shore","code":"ggplot(ideea_maps$r34$land$sf) +   geom_sf(aes(fill = reg34)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"region-map-with-off-shores","dir":"Articles","previous_headings":"STEPS TO CREATE MAP","what":"34-region map with off-shores","title":"IDEEA MAPS ","text":"34 regions along -shores included. -shore regions mainly included coastal states like West Bengal, Kerala, Gujrat etc.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"details-of-34-region-with-off-shore","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 34-region map with off-shores","what":"Details of 34 Region with off-shore","title":"IDEEA MAPS ","text":"","code":"r34_land_withoffshore <- ideea_maps$r34$with_offshores$sf code <- r34_land_withoffshore$reg34 state <- r34_land_withoffshore$reg_off df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-34-region-map-with-offshore","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 34-region map with off-shores","what":"Plotting 34 Region Map with offshore","title":"IDEEA MAPS ","text":"34 region map -shore","code":"ggplot(ideea_maps$r34$with_offshores$sf) +   geom_sf(aes(fill = reg34)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"details-of-32-region","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 32-region map without off-shores","what":"Details of 32 Region","title":"IDEEA MAPS ","text":"","code":"r32_land <- ideea_maps$r32$land$sf code <- r32_land$reg32 state <- r32_land$name32 df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-32-region-map","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 32-region map without off-shores","what":"Plotting 32 Region Map","title":"IDEEA MAPS ","text":"32 region map without -shore","code":"ggplot(ideea_maps$r32$land$sf) +   geom_sf(aes(fill = reg32)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"details-of-32-region-with-off-shore","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 32-region map with off-shores","what":"Details of 32 Region with off-shore","title":"IDEEA MAPS ","text":"","code":"r32_land_withoffshore <- ideea_maps$r32$with_offshores$sf code <- r32_land_withoffshore$reg32 state <- r32_land_withoffshore$reg_off df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-32-region-map-with-offshore","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 32-region map with off-shores","what":"Plotting 32 Region Map with offshore","title":"IDEEA MAPS ","text":"32 region map -shore","code":"ggplot(ideea_maps$r32$with_offshores$sf) +   geom_sf(aes(fill = reg32)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"region-map-without-off-shores-2","dir":"Articles","previous_headings":"7-region map","what":"7-region map without off-shores","title":"IDEEA MAPS ","text":"Indian mainland divided five region two major islands (Andaman & Nicobar bay Bengal Lakshadwip Arabian sea) considered two separate region.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"details-of-7-region","dir":"Articles","previous_headings":"7-region map > 7-region map without off-shores","what":"Details of 7 Region","title":"IDEEA MAPS ","text":"","code":"r7_land <- ideea_maps$r7$land$sf code <- r7_land$reg7 zone <- r7_land$name7 df <- data.frame(code, zone) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-7-region-map-without-off-shore","dir":"Articles","previous_headings":"7-region map > 7-region map without off-shores","what":"Plotting 7 Region Map without off-shore","title":"IDEEA MAPS ","text":"7 region map without -shore","code":"ggplot(ideea_maps$r7$land$sf) +   geom_sf(aes(fill = reg7)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"region-map-with-off-shores-2","dir":"Articles","previous_headings":"7-region map","what":"7-region map with off-shores","title":"IDEEA MAPS ","text":"7 region map -shores can observed eastern, southern western region. Also -shores two islands included Andaman Lakshadwip separately five region map -shores included southern eastern region.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-7-region-map-with-offshore","dir":"Articles","previous_headings":"7-region map > 7-region map with off-shores","what":"Plotting 7 Region Map with offshore","title":"IDEEA MAPS ","text":"7 region map -shore","code":"ggplot(ideea_maps$r7$with_offshores$sf) +   geom_sf(aes(fill = reg7)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"region-map-without-off-shores-3","dir":"Articles","previous_headings":"5-region map","what":"5-region map without off-shores","title":"IDEEA MAPS ","text":"Looking zonal map India, India divided five zones namely North Zone, South Zone, East Zone, West Zone North East Zone. zones include 28 states 8 union territories. zone comprised certain number states union territories. details ggplot refer:  “https://www.tutorialspoint.com/ggplot2/ggplot2_quick_guide.htm”","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"details-of-5-region","dir":"Articles","previous_headings":"5-region map > 5-region map without off-shores","what":"Details of 5 Region","title":"IDEEA MAPS ","text":"","code":"r5_land <- ideea_maps$r5$land$sf code <- r5_land$reg5 zone <- r5_land$name5 df <- data.frame(code, zone) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-5-region-map-without-off-shore","dir":"Articles","previous_headings":"5-region map > 5-region map without off-shores","what":"Plotting 5 Region Map without off-shore","title":"IDEEA MAPS ","text":"5 region map without -shore","code":"ggplot(ideea_maps$r5$land$sf) +   geom_sf(aes(fill = reg5)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"region-map-with-off-shores-3","dir":"Articles","previous_headings":"5-region map","what":"5-region map with off-shores","title":"IDEEA MAPS ","text":"five regions along -shores included. -shore regions mainly included eastern, western southern region.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-5-region-map-with-offshore","dir":"Articles","previous_headings":"5-region map > 5-region map with off-shores","what":"Plotting 5 Region Map with offshore","title":"IDEEA MAPS ","text":"5 region map -shore","code":"ggplot(ideea_maps$r5$with_offshores$sf) +   geom_sf(aes(fill = reg5)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"region-map-only-mainland","dir":"Articles","previous_headings":"1-region map","what":"1- region map: only mainland","title":"IDEEA MAPS ","text":"states union territories (except islands)considered single region.one simplest among inter regional trade considered. 1 region map: mainland","code":"ideea_maps$r1$mainland$sf %>% plot()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"region-map-mainland-with-islands","dir":"Articles","previous_headings":"1-region map","what":"1-region map: mainland with islands","title":"IDEEA MAPS ","text":"two major islands (Andaman & Nicobar Lakshadweep) included mainland. 1 region map: mainland islands","code":"ideea_maps$r1$with_islands$sf %>% plot()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"region-map-without-off-shores-4","dir":"Articles","previous_headings":"7-region map","what":"7-region map without off-shores","title":"IDEEA MAPS ","text":"Indian mainland divided five region two major islands (Andaman & Nicobar bay Bengal Lakshadwip Arabian sea) considered two separate region.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"details-of-7-region-1","dir":"Articles","previous_headings":"7-region map > 7-region map without off-shores","what":"Details of 7 Region","title":"IDEEA MAPS ","text":"","code":"r7_land <- ideea_maps$r7$land$sf code <- r7_land$reg7 zone <- r7_land$name7 df <- data.frame(code, zone) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-7-region-map-without-off-shore-1","dir":"Articles","previous_headings":"7-region map > 7-region map without off-shores","what":"Plotting 7 Region Map without off-shore","title":"IDEEA MAPS ","text":"7 region map without -shore","code":"ggplot(ideea_maps$r7$land$sf) +   geom_sf(aes(fill = reg7)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"region-map-with-off-shores-4","dir":"Articles","previous_headings":"7-region map","what":"7-region map with off-shores","title":"IDEEA MAPS ","text":"7 region map -shores can observed eastern, southern western region. Also -shores two islands included Andaman Lakshadwip separately five region map -shores included southern eastern region.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-7-region-map-with-offshore-1","dir":"Articles","previous_headings":"7-region map > 7-region map with off-shores","what":"Plotting 7 Region Map with offshore","title":"IDEEA MAPS ","text":"7 region map -shore","code":"ggplot(ideea_maps$r7$with_offshores$sf) +   geom_sf(aes(fill = reg7)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"region-map-without-off-shores-5","dir":"Articles","previous_headings":"7-region map","what":"34-region map without off-shores","title":"IDEEA MAPS ","text":"state considered region total 34 regions considered.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"details-of-34-region-1","dir":"Articles","previous_headings":"7-region map > 34-region map without off-shores","what":"Details of 34 Region","title":"IDEEA MAPS ","text":"","code":"r34_land <- ideea_maps$r34$land$sf code <- r34_land$reg34 state <- r34_land$name34 df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-34-region-map-1","dir":"Articles","previous_headings":"7-region map > 34-region map without off-shores","what":"Plotting 34 Region Map","title":"IDEEA MAPS ","text":"34 region map without -shore","code":"ggplot(ideea_maps$r34$land$sf) +   geom_sf(aes(fill = reg34)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"region-map-with-off-shores-5","dir":"Articles","previous_headings":"7-region map","what":"34-region map with off-shores","title":"IDEEA MAPS ","text":"34 regions along -shores included. -shore regions mainly included coastal states like West Bengal, Kerala, Gujrat etc.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"details-of-34-region-with-off-shore-1","dir":"Articles","previous_headings":"7-region map > 34-region map with off-shores","what":"Details of 34 Region with off-shore","title":"IDEEA MAPS ","text":"","code":"r34_land_withoffshore <- ideea_maps$r34$with_offshores$sf code <- r34_land_withoffshore$reg34 state <- r34_land_withoffshore$reg_off df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-34-region-map-with-offshore-1","dir":"Articles","previous_headings":"7-region map > 34-region map with off-shores","what":"Plotting 34 Region Map with offshore","title":"IDEEA MAPS ","text":"34 region map -shore","code":"ggplot(ideea_maps$r34$with_offshores$sf) +   geom_sf(aes(fill = reg34)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"details-of-32-region-1","dir":"Articles","previous_headings":"7-region map > 32-region map without off-shores","what":"Details of 32 Region","title":"IDEEA MAPS ","text":"","code":"r32_land <- ideea_maps$r32$land$sf code <- r32_land$reg32 state <- r32_land$name32 df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-32-region-map-1","dir":"Articles","previous_headings":"7-region map > 32-region map without off-shores","what":"Plotting 32 Region Map","title":"IDEEA MAPS ","text":"32 region map without -shore","code":"ggplot(ideea_maps$r32$land$sf) +   geom_sf(aes(fill = reg32)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"details-of-32-region-with-off-shore-1","dir":"Articles","previous_headings":"7-region map > 32-region map with off-shores","what":"Details of 32 Region with off-shore","title":"IDEEA MAPS ","text":"","code":"r32_land_withoffshore <- ideea_maps$r32$with_offshores$sf code <- r32_land_withoffshore$reg32 state <- r32_land_withoffshore$reg_off df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/maps_.html","id":"plotting-32-region-map-with-offshore-1","dir":"Articles","previous_headings":"7-region map > 32-region map with off-shores","what":"Plotting 32 Region Map with offshore","title":"IDEEA MAPS ","text":"32 region map -shore","code":"ggplot(ideea_maps$r32$with_offshores$sf) +   geom_sf(aes(fill = reg32)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"regions","dir":"Articles","previous_headings":"","what":"REGIONS","title":"IDEEA: regions and maps","text":"India, union states, Sovereign, Secular, Democratic Republic Parliamentary system Government.According States Reorganization Act 1956, states India organized based linguistic lines.28 states 8 Union territories country.  modelling framework provision modify number sub-regions. Initially GIS map 46 different regions given following table used. 46 regions (r46) states union territories alterations. 46 region map Daman Diu considered two separate region. Moreover districts Puducherry considered separate region. Actually,Union territory Puducherry comprises erstwhile French colonies viz. Puducherry, Karaikal, Mahe Yanam. Puducherry Karaikal regions surrounded State Tamilnadu, whereas Mahe surrounded State Kerala Yanam state Andra Pradesh. However, 36 region (r36) map different areas Puducherry (PY.1 - PY.9) clubbed together separate region called Puducherry (PY). Similarly,Daman (DM) Diu (DU) merged single region Daman Diu (DD). following table clearly depicts administrative area considered r46, r36, r34,r32,r7 r5.","code":""},{"path":[]},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"build-ideea-dev","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > Step-1","what":"Build IDEEA.dev","title":"IDEEA: regions and maps","text":"Build package (IDEEA.dev) RStudio:   Build/Install Restart tabs one four sub-screens RStudio, appears r-package projects. Alternatively, can install command line devtools::build() create source file package can used installation package file (Tools/Install package/… choose file).","code":""},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"install-the-packages-asp-bsf-ctidyverse-dggplot2","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > Step-2","what":"Install the packages a)sp b)sf c)tidyverse d)ggplot2","title":"IDEEA: regions and maps","text":"packages can installed directly CRAN webpage R environment, using command. install.packages(“Package Name”) Example: installing sf package: install.packages(“sf”)","code":""},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"loadstart-the-installed-packages","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > Step-3","what":"Load/start the installed packages","title":"IDEEA: regions and maps","text":"library(Package Name)","code":"library(IDEEA.dev) library(sp) library(sf) library(tidyverse) library(ggplot2) library(insight) library(dplyr) library(reticulate)"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"select-no-of-sub-region-mainland-and-offshore","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > Step-4","what":"Select No of Sub-region, mainland and offshore","title":"IDEEA: regions and maps","text":"Ideea model offers flexibility divide entire administrative area different sub-region.present user can select among r1 (One region), r5 (five region) , r7(seven region), r32 (32 region)r34(34 region). mainland mainland -shores can selected separately sub-regional topology.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"region-map-without-off-shores","dir":"Articles","previous_headings":"STEPS TO CREATE MAP","what":"34-region map without off-shores","title":"IDEEA: regions and maps","text":"state considered region total 34 regions considered. Different small areas Puducherry merged surrounding states. Daman Diu merged Gujrat.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"details-of-34-region","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 34-region map without off-shores","what":"Details of 34 Region","title":"IDEEA: regions and maps","text":"","code":"r34_land <- ideea_maps$r34$land$sf code <- r34_land$reg34 state <- r34_land$name34 df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-34-region-map","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 34-region map without off-shores","what":"Plotting 34 Region Map","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r34$land$sf) +   geom_sf(aes(fill = reg34)) +   geom_sf_label(aes(label = reg34), check_overlap = T, alpha = .75) +   labs(x = \"\", y = \"\") +   theme_bw() ggsave(\"tmp/ideea_r34.png\", device = \"png\", height = 5, width = 5, scale = 2)"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"region-map-with-off-shores","dir":"Articles","previous_headings":"STEPS TO CREATE MAP","what":"34-region map with off-shores","title":"IDEEA: regions and maps","text":"34 regions along -shores included. -shore regions mainly included coastal states like West Bengal, Kerala, Gujrat etc.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"details-of-34-region-with-off-shore","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 34-region map with off-shores","what":"Details of 34 Region with off-shore","title":"IDEEA: regions and maps","text":"","code":"r34_land_withoffshore <- ideea_maps$r34$with_offshores$sf code <- r34_land_withoffshore$reg34 state <- r34_land_withoffshore$reg_off df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-34-region-map-with-offshore","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 34-region map with off-shores","what":"Plotting 34 Region Map with offshore","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r34$with_offshores$sf) +   geom_sf(aes(fill = reg34)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"details-of-32-region","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 32-region map without off-shores","what":"Details of 32 Region","title":"IDEEA: regions and maps","text":"","code":"r32_land <- ideea_maps$r32$land$sf code <- r32_land$reg32 state <- r32_land$name32 df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-32-region-map","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 32-region map without off-shores","what":"Plotting 32 Region Map","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r32$land$sf) +   geom_sf(aes(fill = reg32)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"details-of-32-region-with-off-shore","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 32-region map with off-shores","what":"Details of 32 Region with off-shore","title":"IDEEA: regions and maps","text":"","code":"r32_land_withoffshore <- ideea_maps$r32$with_offshores$sf code <- r32_land_withoffshore$reg32 state <- r32_land_withoffshore$reg_off df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-32-region-map-with-offshore","dir":"Articles","previous_headings":"STEPS TO CREATE MAP > 32-region map with off-shores","what":"Plotting 32 Region Map with offshore","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r32$with_offshores$sf) +   geom_sf(aes(fill = reg32)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"region-map-without-off-shores-2","dir":"Articles","previous_headings":"7-region map","what":"7-region map without off-shores","title":"IDEEA: regions and maps","text":"Indian mainland divided five region two major islands (Andaman & Nicobar bay Bengal Lakshadwip Arabian sea) considered two separate region.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"details-of-7-region","dir":"Articles","previous_headings":"7-region map > 7-region map without off-shores","what":"Details of 7 Region","title":"IDEEA: regions and maps","text":"","code":"r7_land <- ideea_maps$r7$land$sf code <- r7_land$reg7 zone <- r7_land$name7 df <- data.frame(code, zone) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-7-region-map-without-off-shore","dir":"Articles","previous_headings":"7-region map > 7-region map without off-shores","what":"Plotting 7 Region Map without off-shore","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r7$land$sf) +   geom_sf(aes(fill = reg7)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"region-map-with-off-shores-2","dir":"Articles","previous_headings":"7-region map","what":"7-region map with off-shores","title":"IDEEA: regions and maps","text":"7 region map -shores can observed eastern, southern western region. Also -shores two islands included Andaman Lakshadwip separately five region map -shores included southern eastern region.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-7-region-map-with-offshore","dir":"Articles","previous_headings":"7-region map > 7-region map with off-shores","what":"Plotting 7 Region Map with offshore","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r7$with_offshores$sf) +   geom_sf(aes(fill = reg7)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"region-map-without-off-shores-3","dir":"Articles","previous_headings":"5-region map","what":"5-region map without off-shores","title":"IDEEA: regions and maps","text":"Looking zonal map India, India divided five zones namely North Zone, South Zone, East Zone, West Zone North East Zone. zones include 28 states 8 union territories. zone comprised certain number states union territories. details ggplot refer:  “https://www.tutorialspoint.com/ggplot2/ggplot2_quick_guide.htm”","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"details-of-5-region","dir":"Articles","previous_headings":"5-region map > 5-region map without off-shores","what":"Details of 5 Region","title":"IDEEA: regions and maps","text":"","code":"r5_land <- ideea_maps$r5$land$sf code <- r5_land$reg5 zone <- r5_land$name5 df <- data.frame(code, zone) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-5-region-map-without-off-shore","dir":"Articles","previous_headings":"5-region map > 5-region map without off-shores","what":"Plotting 5 Region Map without off-shore","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r5$land$sf) +   geom_sf(aes(fill = reg5)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"region-map-with-off-shores-3","dir":"Articles","previous_headings":"5-region map","what":"5-region map with off-shores","title":"IDEEA: regions and maps","text":"five regions along -shores included. -shore regions mainly included eastern, western southern region.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-5-region-map-with-offshore","dir":"Articles","previous_headings":"5-region map > 5-region map with off-shores","what":"Plotting 5 Region Map with offshore","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r5$with_offshores$sf) +   geom_sf(aes(fill = reg5)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"region-map-only-mainland","dir":"Articles","previous_headings":"1-region map","what":"1- region map: only mainland","title":"IDEEA: regions and maps","text":"states union territories (except islands)considered single region.one simplest among inter regional trade considered.","code":"ideea_maps$r1$mainland$sf %>% plot()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"region-map-mainland-with-islands","dir":"Articles","previous_headings":"1-region map","what":"1-region map: mainland with islands","title":"IDEEA: regions and maps","text":"two major islands (Andaman & Nicobar Lakshadweep) included mainland.","code":"ideea_maps$r1$with_islands$sf %>% plot()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"region-map-without-off-shores-4","dir":"Articles","previous_headings":"7-region map","what":"7-region map without off-shores","title":"IDEEA: regions and maps","text":"Indian mainland divided five region two major islands (Andaman & Nicobar bay Bengal Lakshadwip Arabian sea) considered two separate region.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"details-of-7-region-1","dir":"Articles","previous_headings":"7-region map > 7-region map without off-shores","what":"Details of 7 Region","title":"IDEEA: regions and maps","text":"","code":"r7_land <- ideea_maps$r7$land$sf code <- r7_land$reg7 zone <- r7_land$name7 df <- data.frame(code, zone) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-7-region-map-without-off-shore-1","dir":"Articles","previous_headings":"7-region map > 7-region map without off-shores","what":"Plotting 7 Region Map without off-shore","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r7$land$sf) +   geom_sf(aes(fill = reg7)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"region-map-with-off-shores-4","dir":"Articles","previous_headings":"7-region map","what":"7-region map with off-shores","title":"IDEEA: regions and maps","text":"7 region map -shores can observed eastern, southern western region. Also -shores two islands included Andaman Lakshadwip separately five region map -shores included southern eastern region.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-7-region-map-with-offshore-1","dir":"Articles","previous_headings":"7-region map > 7-region map with off-shores","what":"Plotting 7 Region Map with offshore","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r7$with_offshores$sf) +   geom_sf(aes(fill = reg7)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"region-map-without-off-shores-5","dir":"Articles","previous_headings":"7-region map","what":"34-region map without off-shores","title":"IDEEA: regions and maps","text":"state considered region total 34 regions considered.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"details-of-34-region-1","dir":"Articles","previous_headings":"7-region map > 34-region map without off-shores","what":"Details of 34 Region","title":"IDEEA: regions and maps","text":"","code":"r34_land <- ideea_maps$r34$land$sf code <- r34_land$reg34 state <- r34_land$name34 df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-34-region-map-1","dir":"Articles","previous_headings":"7-region map > 34-region map without off-shores","what":"Plotting 34 Region Map","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r34$land$sf) +   geom_sf(aes(fill = reg34)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"region-map-with-off-shores-5","dir":"Articles","previous_headings":"7-region map","what":"34-region map with off-shores","title":"IDEEA: regions and maps","text":"34 regions along -shores included. -shore regions mainly included coastal states like West Bengal, Kerala, Gujrat etc.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"details-of-34-region-with-off-shore-1","dir":"Articles","previous_headings":"7-region map > 34-region map with off-shores","what":"Details of 34 Region with off-shore","title":"IDEEA: regions and maps","text":"","code":"r34_land_withoffshore <- ideea_maps$r34$with_offshores$sf code <- r34_land_withoffshore$reg34 state <- r34_land_withoffshore$reg_off df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-34-region-map-with-offshore-1","dir":"Articles","previous_headings":"7-region map > 34-region map with off-shores","what":"Plotting 34 Region Map with offshore","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r34$with_offshores$sf) +   geom_sf(aes(fill = reg34)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"details-of-32-region-1","dir":"Articles","previous_headings":"7-region map > 32-region map without off-shores","what":"Details of 32 Region","title":"IDEEA: regions and maps","text":"","code":"r32_land <- ideea_maps$r32$land$sf code <- r32_land$reg32 state <- r32_land$name32 df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-32-region-map-1","dir":"Articles","previous_headings":"7-region map > 32-region map without off-shores","what":"Plotting 32 Region Map","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r32$land$sf) +   geom_sf(aes(fill = reg32)) +   theme_bw()"},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"details-of-32-region-with-off-shore-1","dir":"Articles","previous_headings":"7-region map > 32-region map with off-shores","what":"Details of 32 Region with off-shore","title":"IDEEA: regions and maps","text":"","code":"r32_land_withoffshore <- ideea_maps$r32$with_offshores$sf code <- r32_land_withoffshore$reg32 state <- r32_land_withoffshore$reg_off df <- data.frame(code, state) knitr::kable(df, format = \"html\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/regions.html","id":"plotting-32-region-map-with-offshore-1","dir":"Articles","previous_headings":"7-region map > 32-region map with off-shores","what":"Plotting 32 Region Map with offshore","title":"IDEEA: regions and maps","text":"","code":"ggplot(ideea_maps$r32$with_offshores$sf) +   geom_sf(aes(fill = reg32)) +   theme_bw()"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/team.html","id":"authors","dir":"Articles","previous_headings":"","what":"Authors","title":"IDEEA team and community","text":"(model, software, studies, team, …)","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/team.html","id":"list-of-projectsstudies","dir":"Articles","previous_headings":"","what":"List of projects/studies","title":"IDEEA team and community","text":"Link main website","code":""},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/transport.html","id":"light-duty-vehicles-ldv","dir":"Articles","previous_headings":"","what":"Light Duty Vehicles (LDV)","title":"IDEEA: transportation module","text":"LDV cars modeled deliver two types transportation services, based efficiency/fuel consumption per trip: * highway passengerkm (P-LDV-HWY) city passenger*km (P-LDV-CTY)","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/transport.html","id":"commodities","dir":"Articles","previous_headings":"Light Duty Vehicles (LDV)","what":"Commodities","title":"IDEEA: transportation module","text":"","code":"GSL <- newCommodity(   name = \"GSL\",    unit = \"PJ\",    slice = \"ANNUAL\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/transport.html","id":"transport-services","dir":"Articles","previous_headings":"Light Duty Vehicles (LDV)","what":"Transport services","title":"IDEEA: transportation module","text":"","code":"PLDVHWY <- newCommodity(   name = \"PLDVHWY\",    description = \"LDV passengers transportation on highway\",   unit = \"MPKm\", # \"million passenger * km\",    slice = \"YDAY\")  PLDVCTY <- newCommodity(   name = \"PLDVCTY\",    description = \"LDV passengers transportation in city\",   unit = \"MPKm\", # \"million passenger * km\",    slice = \"YDAY\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/transport.html","id":"infrastructure","dir":"Articles","previous_headings":"Light Duty Vehicles (LDV)","what":"Infrastructure","title":"IDEEA: transportation module","text":"","code":"GSTATION <- newCommodity(   name = \"GSTATION\",    description = \"Gas station\",   unit = \"PJ\", # number of cars to fuel a year   slice = \"ANNUAL\")  CHARGEST <- newCommodity(   name = \"CHARGEST\",    description = \"Electric car charing station\",   unit = \"GWh\", # number of cars to fuel a year   slice = \"ANNUAL\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/transport.html","id":"gasoline-cars","dir":"Articles","previous_headings":"Light Duty Vehicles (LDV)","what":"Gasoline cars","title":"IDEEA: transportation module","text":"","code":"# Technologies LDVG <- newTechnology(   name = \"LDVG\",   description = \"Gasoline Light Duty Vehicles\",   input = data.frame(     comm = c(\"GSL\", \"BIO\"),     unit = \"PJ\", # for simplicity and electrification scenarios, normally \"PJ\"     group = \"i\"   ),   output = data.frame(     comm = c(\"PLDVHWY\",  # passenger * km, highway              \"PLDVCTY\"), # passenger * km, city     unit = \"MPKm\", # million passenger * km     group = \"o\" # a number or string, \"o\" = output   ),   units = list(     capacity = \"1000 Vehicles\",     activity = \"million km, city\", # measured in one of the output commodities     costs = \"MUSD\"   ),   cap2act = 10, # 10000 km per car a year => 10000 * 1000 / 1e6   ceff = data.frame(     comm = c(\"GSL\", \"BIO\", \"PLDVHWY\", \"PLDVCTY\"),     use2cact = c(NA, NA, 3, 2), # !!! calculate million km per unit of input     share.up = c(NA, .1, .4, .8),     cact2cout = c(NA, NA, 2, 3) # passengers per vehicles (assumption)   ),   olife = list(olife = 10),   stock = list(     region = NA,     year = 2022,     stock = 500   ),   invcost = list(     invcost = 15 # 15000 [USD/car] * 1000 [cars] / 1e6 => MUSD/1000 cars   ),   fixom = list(     fixom = .5 # repairs a year, taxes and fees, tires, oil change, parking etc.   ),   # varom = list(   #   varom = ... # could be \"tires, oil change\"    # )   aux = list(     acomm = c(\"GSTATION\", \"PM\"),      unit = c(\"PJ\", \"kt\")   ), # N cars fueled a year   aeff = list(     acomm = c(\"GSTATION\", \"PM\"),     cap2ainp = c(1, NA), # estimate number of trips to gas-station a year     act2aout = c(NA, .01) # find emissions data per km     )   )    draw(LDVG)"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/transportation.html","id":"light-duty-vehicles-ldv","dir":"Articles","previous_headings":"","what":"Light Duty Vehicles (LDV)","title":"IDEEA: transportation module","text":"LDV cars modeled deliver two types transportation services, based efficiency/fuel consumption per trip: * highway passengerkm (P-LDV-HWY) city passenger*km (P-LDV-CTY)","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/transportation.html","id":"commodities","dir":"Articles","previous_headings":"Light Duty Vehicles (LDV)","what":"Commodities","title":"IDEEA: transportation module","text":"","code":"GSL <- newCommodity(   name = \"GSL\",    unit = \"PJ\",    slice = \"ANNUAL\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/transportation.html","id":"transport-services","dir":"Articles","previous_headings":"Light Duty Vehicles (LDV)","what":"Transport services","title":"IDEEA: transportation module","text":"","code":"PLDVHWY <- newCommodity(   name = \"PLDVHWY\",    description = \"LDV passengers transportation on highway\",   unit = \"MPKm\", # \"million passenger * km\",    slice = \"YDAY\")  PLDVCTY <- newCommodity(   name = \"PLDVCTY\",    description = \"LDV passengers transportation in city\",   unit = \"MPKm\", # \"million passenger * km\",    slice = \"YDAY\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/transportation.html","id":"infrastructure","dir":"Articles","previous_headings":"Light Duty Vehicles (LDV)","what":"Infrastructure","title":"IDEEA: transportation module","text":"","code":"GSTATION <- newCommodity(   name = \"GSTATION\",    description = \"Gas station\",   unit = \"PJ\", # number of cars to fuel a year   slice = \"ANNUAL\")  CHARGEST <- newCommodity(   name = \"CHARGEST\",    description = \"Electric car charing station\",   unit = \"GWh\", # number of cars to fuel a year   slice = \"ANNUAL\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/transportation.html","id":"gasoline-cars","dir":"Articles","previous_headings":"Light Duty Vehicles (LDV)","what":"Gasoline cars","title":"IDEEA: transportation module","text":"","code":"# Technologies LDVG <- newTechnology(   name = \"LDVG\",   description = \"Gasoline Light Duty Vehicles\",   input = data.frame(     comm = c(\"GSL\", \"BIO\"),     unit = \"PJ\", # for simplicity and electrification scenarios, normally \"PJ\"     group = \"i\"   ),   output = data.frame(     comm = c(\"PLDVHWY\",  # passenger * km, highway              \"PLDVCTY\"), # passenger * km, city     unit = \"MPKm\", # million passenger * km     group = \"o\" # a number or string, \"o\" = output   ),   units = list(     capacity = \"1000 Vehicles\",     activity = \"million km, city\", # measured in one of the output commodities     costs = \"MUSD\"   ),   cap2act = 10, # 10000 km per car a year => 10000 * 1000 / 1e6   ceff = data.frame(     comm = c(\"GSL\", \"BIO\", \"PLDVHWY\", \"PLDVCTY\"),     use2cact = c(NA, NA, 3, 2), # !!! calculate million km per unit of input     share.up = c(NA, .1, .4, .8),     cact2cout = c(NA, NA, 2, 3) # passengers per vehicles (assumption)   ),   olife = list(olife = 10),   stock = list(     region = NA,     year = 2022,     stock = 500   ),   invcost = list(     invcost = 15 # 15000 [USD/car] * 1000 [cars] / 1e6 => MUSD/1000 cars   ),   fixom = list(     fixom = .5 # repairs a year, taxes and fees, tires, oil change, parking etc.   ),   # varom = list(   #   varom = ... # could be \"tires, oil change\"    # )   aux = list(     acomm = c(\"GSTATION\", \"PM\"),      unit = c(\"PJ\", \"kt\")   ), # N cars fueled a year   aeff = list(     acomm = c(\"GSTATION\", \"PM\"),     cap2ainp = c(1, NA), # estimate number of trips to gas-station a year     act2aout = c(NA, .01) # find emissions data per km     )   )    draw(LDVG)"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/winddata.html","id":"wind-potential-250m-map","dir":"Articles","previous_headings":"","what":"Wind potential (250m) map","title":"Building wind database","text":"","code":"file_iec1 <- get_wind_capacity_factor(\"IND\", IEC = 1) tr <- rast(file_iec1) plot(tr)"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/articles/winddata.html","id":"select-region","dir":"Articles","previous_headings":"","what":"Select region","title":"Building wind database","text":"","code":"r <- which(gis_sf$reg32 == \"KA\"); r gis_sf[r,] plot(gis_sp[r,], add = T)  # Cut the region ex <- raster::extent(recenter(gis_sp[r,])) r2 <- crop(tr, ex) r3 <- terra::mask(r2, vect(recenter(gis_sp[r,]))) plot(r3) hist(r3, n = 50)  #  scl <- 1 int <- .26 t3 <- app(r3, fun = function(x) {x[x < .30] <- NA; return(x)}) v3 <- as.polygons(t3 * scl + int); values(v3) <- (values(v3) - int) / scl  # v3 dim(v3) if (any(!is.valid(v3))) {   v3 <- makeValid(v3)   # is.valid(o) } plot(t3) plot(v3, border = \"blue\", add = F)  s3 <- sf::st_as_sf(v3)  locid_r <- get_locid(gis_sp[r,], method = \"intersect\") # locid_r <- get_locid(sp3, method = \"intersect\") locid_r_grid <- getGrid(\"poly\", locid = locid_r) # plot(locid_r_grid, add = F, border = \"grey\")  locid_r_grid_sf <- st_as_sf(locid_r_grid) %>% st_shift_longitude() z <- terra::extract(t3, vect(locid_r_grid_sf), fun = \"mean\", na.rm = T) locid_r_grid_sf$cf_mean <- z$lyr.1  s3_locid_r_sf <- st_intersection(locid_r_grid_sf, s3) %>%   st_shift_longitude() %>%   dplyr::select(locid, cf_mean, lyr.1) %>%   rename(cf_round = lyr.1) %>%   mutate(     area_km2 = as.numeric(st_area(geometry))/1e6,      # 5 GW / 1000 km2 (~50 acres per MW: https://www.nrel.gov/analysis/tech-size.html)     # energyRt::convert(\"MW/ac\", \"MW/km2\", 1/45) * 1000 # bug in convert, factor 1e3     # energyRt::convert(\"km2\", \"m2\", 1) # bug      GW = 5 * area_km2 / 1e3,     TWh = cf_mean * GW * 8760 / 1e3,     .after = \"locid\") %>%   mutate(n = row_number(), .before = \"locid\") %>%   arrange(desc(TWh)) %>%   mutate(     n2 = row_number(),      GW_cum = cumsum(GW),     TWh_cum = cumsum(TWh),     area_km2_cum = cumsum(area_km2),     .before = \"locid\") %>%   arrange(n) plot(r3) a <- ggplot() +   geom_sf(data = gis_sf[r,], color = \"grey\") +   geom_sf(aes(fill = GW), color = NA, data = s3_locid_r_sf) +   # geom_sf(aes(fill = cf_round), color = NA, data = s3_locid_r_sf) +    # coord_sf(default_crs = sf::st_crs(4326))   scale_fill_viridis_c(direction = -1) +   theme_void() # st_collection_extract(x, \"POLYGON\") # best locations min_GW <- min(   5, # good lications   quantile(s3_locid_r_sf$GW, probs = .85, na.rm = T) #  ) # summary(s3_locid_r_sf$GW)  kk <- unique(locid_r_grid_sf$locid[locid_r_grid_sf$lat <= 70]) ii <- s3_locid_r_sf$GW >= min_GW & s3_locid_r_sf$locid %in% kk max_GWh <- sum(s3_locid_r_sf$TWh[ii], na.rm = T) ll <- locid_r_grid_sf$locid %in% s3_locid_r_sf$locid[ii] # summary(ii)  fig <- try(   a +      geom_sf(data = locid_r_grid_sf, color = alpha(\"black\", 1),                size = .1, fill = NA) +      geom_sf(data = locid_r_grid_sf[ll,], color = alpha(\"red\", 1), size = .3, fill = NA),   silent = T)  if (any(class(fig) == \"try-error\")) {   fig <- try(     a + geom_sf(data = locid_r_grid_sf[ll,], color = alpha(\"red\", 1), size = .3, fill = NA))   if (any(class(fig) == \"try-error\")) try(a, silent = T) else fig } else {   fig } # ggplot(s3_locid_r_sf) + #   geom_histogram(aes(GW, after_stat(density)), fill = \"dodgerblue\", bins = 50) + #   scale_x_log10() + #   theme_bw()  ggplot(s3_locid_r_sf) +   geom_area(aes(n2 * 2.5, TWh_cum), fill = \"dodgerblue\", alpha = .85) +   # geom_area(aes(area_km2_cum / 1e3, TWh_cum), fill = \"dodgerblue\", alpha = .85) +   geom_hline(aes(yintercept = GWh, color = mxgwh), show.legend = T,              data = tibble(GWh = max_GWh, mxgwh = factor(\"Total maximum potential of selected locations\"))) +   scale_color_manual(values = \"red\", name = \"\") +   # scale_x_log10() +   labs(x = \"Cumulative land area, 1000 km2\",        y = \"Cumulative wind power potential, TWh-a\") +   theme_bw() +   theme(legend.position = \"top\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"IDEEA comunity. Author, maintainer.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"comunity (2023). IDEEA.dev: Indian Zero Carbon Energy Pathways (IDEEA) optimization model. https://github.com/ideea-model, https://ideea-model.github.io/IDEEA.dev/index.html.","code":"@Manual{,   title = {IDEEA.dev: Indian Zero Carbon Energy Pathways (IDEEA) optimization model},   author = {IDEEA comunity},   year = {2023},   note = {https://github.com/ideea-model, https://ideea-model.github.io/IDEEA.dev/index.html}, }"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/index.html","id":"ideeadev-","dir":"","previous_headings":"","what":"Indian Zero Carbon Energy Pathways (IDEEA) optimization model","title":"Indian Zero Carbon Energy Pathways (IDEEA) optimization model","text":"[development version IDEEA model R-package manual]","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/index.html","id":"about","dir":"","previous_headings":"","what":"About","title":"Indian Zero Carbon Energy Pathways (IDEEA) optimization model","text":"Indian Zero Carbon Energy Pathways (IDEEA) collaborative open energy modeling initiative Environmental Defense Fund, Global Change Programme, Jadavpur University, Indian Institute Science, Energy Transition Group develop tools scenarios India’s energy transition. project aims evaluation broad set scenarios high penetration variable renewables identify set cost-efficient options deep decarbonization carbon neutrality India broad public discussion.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/index.html","id":"ideea-models","dir":"","previous_headings":"","what":"IDEEA models","title":"Indian Zero Carbon Energy Pathways (IDEEA) optimization model","text":"Decarbonization electricity critical milestone energy transition low/zero emissions. Wind solar energy sustainable options decarbonization, recent reduction costs makes first options consider. However, variability energy sources requires explicit modeling evaluation alternative balancing options, hydro energy, energy storage, grid, back-capacity, responsive demand. IDEEA project aims develop “new” “renewables era” modeling framework India evaluate high-VER scenarios based high temporal spatial resolution.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Indian Zero Carbon Energy Pathways (IDEEA) optimization model","text":"can install development version IDEEA.dev GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ideea-model/IDEEA.dev\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Indian Zero Carbon Energy Pathways (IDEEA) optimization model","text":"basic example shows solve common problem:","code":"library(IDEEA.dev) ## basic example code"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/IDEEA.dev-package.html","id":null,"dir":"Reference","previous_headings":"","what":"IDEEA.dev: Indian Zero Carbon Energy Pathways (IDEEA) optimization model — IDEEA.dev-package","title":"IDEEA.dev: Indian Zero Carbon Energy Pathways (IDEEA) optimization model — IDEEA.dev-package","text":"IDEEA capacity expansion energy resource planning model built goal explore energy transition options pathways India, inform policy.","code":""},{"path":[]},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/IDEEA.dev-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"IDEEA.dev: Indian Zero Carbon Energy Pathways (IDEEA) optimization model — IDEEA.dev-package","text":"Maintainer: IDEEA comunity ideea@email.org","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_ideea_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from IDEEA database — get_ideea_data","title":"Get data from IDEEA database — get_ideea_data","text":"Get data IDEEA database","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_ideea_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from IDEEA database — get_ideea_data","text":"","code":"get_ideea_data(   name,   nreg = 7,   variable,   agg_fun = sum,   raw = FALSE,   offshore = FALSE,   islands = FALSE )"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_ideea_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from IDEEA database — get_ideea_data","text":"name character, name data table, one : \"coal\", \"oil\", \"gas\", \"biomass\", \"lignite\", ... nreg integer, number region return variable name part name (regular expression) variable return. agg_fun character, function aggregate data region, default \"sum\" (volumes), \"mean\" advised costs variable. raw logical, raw table returned, FALSE default offshore logical, data offshore areas returned, FALSE default islands logical, data remote islands returned, FALSE default","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_ideea_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from IDEEA database — get_ideea_data","text":"","code":"get_ideea_data(\"coal\", raw = T) #> # A tibble: 34 × 13 #>    reg36 name36   mainland offshore reg1  name1 total_reserve_Mt production_2021 #>  * <chr> <chr>    <lgl>    <lgl>    <chr> <chr>            <dbl>           <dbl> #>  1 AP    Andhra … TRUE     FALSE    IND   India           4142.           NA     #>  2 AR    Arunach… TRUE     FALSE    IND   India             90.2          NA     #>  3 AS    Assam    TRUE     FALSE    IND   India            525.            0.036 #>  4 BR    Bihar    TRUE     FALSE    IND   India           4437.           NA     #>  5 CH    Chandig… TRUE     FALSE    IND   India             NA            NA     #>  6 CT    Chhatti… TRUE     FALSE    IND   India          74192.          158.    #>  7 DD    Daman a… TRUE     FALSE    IND   India             NA            NA     #>  8 DL    Delhi    TRUE     FALSE    IND   India             NA            NA     #>  9 DN    Dadra a… TRUE     FALSE    IND   India             NA            NA     #> 10 GA    Goa      TRUE     FALSE    IND   India             NA            NA     #> # ℹ 24 more rows #> # ℹ 5 more variables: production_up_2030 <lgl>, production_up_2050 <lgl>, #> #   cost_USD_t_2020 <dbl>, cost_USD_t_2030 <lgl>, cost_USD_t_2050 <lgl>   get_ideea_data(\"coal\", nreg = 7, \"reserve\") #> # A tibble: 5 × 2 #>   reg7      total_reserve_Mt #>   <chr>                <dbl> #> 1 EAST               213174. #> 2 NORTH                1062. #> 3 NORTHEAST            1670. #> 4 SOUTH               27176. #> 5 WEST               118329.   get_ideea_data(\"oil\", nreg = 34, \"reserve\", islands = T) #> # A tibble: 34 × 4 #>    reg34 mainland oil_reserve_Mt_2021 oil_reserve_GWh_2021 #>    <chr> <lgl>                  <dbl>                <dbl> #>  1 AN    FALSE                   0                      0  #>  2 APY   TRUE                    7.33               85248. #>  3 AR    TRUE                    3.64               42333. #>  4 AS    TRUE                  153.               1779972. #>  5 BR    TRUE                    0                      0  #>  6 CH    TRUE                    0                      0  #>  7 CT    TRUE                    0                      0  #>  8 DL    TRUE                    0                      0  #>  9 DN    TRUE                    0                      0  #> 10 GA    TRUE                    0                      0  #> # ℹ 24 more rows   get_ideea_data(\"coal\", nreg = 7, \"cost\", agg_fun = mean) #> # A tibble: 5 × 4 #>   reg7      cost_USD_t_2020 cost_USD_t_2030 cost_USD_t_2050 #>   <chr>               <dbl>           <dbl>           <dbl> #> 1 EAST                   50             NaN             NaN #> 2 NORTH                  50             NaN             NaN #> 3 NORTHEAST              50             NaN             NaN #> 4 SOUTH                  50             NaN             NaN #> 5 WEST                   50             NaN             NaN   get_ideea_data(\"merra_raw_2014\", raw = T) %>% head() #>                   UTC  locid W10M W50M SWGDN ALBEDO #> 1 2014-01-01 00:30:00 109878  5.6  6.0    63   0.12 #> 2 2014-01-01 00:30:00 109879  4.4  4.7    71   0.12 #> 3 2014-01-01 00:30:00 110453  6.7  7.3    53   0.13 #> 4 2014-01-01 00:30:00 110454  5.6  6.0    61   0.13 #> 5 2014-01-01 00:30:00 110455  4.2  4.5    51   0.12 #> 6 2014-01-01 00:30:00 111028  8.9  9.9    19   0.10"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_ideea_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Get IDEEA map with custom number of regions — get_ideea_map","title":"Get IDEEA map with custom number of regions — get_ideea_map","text":"Get IDEEA map custom number regions","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_ideea_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get IDEEA map with custom number of regions — get_ideea_map","text":"","code":"get_ideea_map(   nreg = 7,   offshore = FALSE,   islands = FALSE,   ROW = FALSE,   aggregate = (nreg != 46),   rename = TRUE,   reg_off = offshore )"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_ideea_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get IDEEA map with custom number of regions — get_ideea_map","text":"nreg integer, number regions, one 1, 5, 7, 32, 34, 36, 37 46 offshore logical, TRUE, offshore area associated regions returned islands logical, \"Andaman Nicobar\" (\"\") \"Lakshadweep\" (\"LD\") included. ROW logical, TRUE, additional geometry neighbour countries' land within 67-98 latitude 5-38 longitude (ROW - Rest World) added. aggregate logical, true, geometries aggregated region. rename logical, TRUE, region name returned instead reg{nreg} name{nreg} reg_off logical, TRUE, reg_off reg{nreg}_off column added added _off names offshore areas/regions.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_ideea_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get IDEEA map with custom number of regions — get_ideea_map","text":"IDEEA map 'sf' 'sp' format","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_ideea_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get IDEEA map with custom number of regions — get_ideea_map","text":"","code":"library(sf) gis_sf <- get_ideea_map(nreg = 1, offshore = F, islands = T) plot(gis_sf[1], key.width = lcm(4))  gis_sf <- get_ideea_map(nreg = 7, offshore = T, islands = T, reg_off = T) plot(gis_sf[\"region\"], key.width = lcm(4))  plot(gis_sf[\"reg_off\"], key.width = lcm(4))  gis_sf <- get_ideea_map(nreg = 32, offshore = T, islands = T) plot(gis_sf[1], key.width = lcm(4))"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Get IDEEA map with custom number of regions — get_map","title":"Get IDEEA map with custom number of regions — get_map","text":"Get IDEEA map custom number regions","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get IDEEA map with custom number of regions — get_map","text":"","code":"get_map(nreg = 5, offshores = FALSE, ROW = FALSE, class = \"sf\")"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get IDEEA map with custom number of regions — get_map","text":"nreg integer, number regions, one 1, 5, 7, 32, 34 offshores logical, TRUE, offshore area associated regions returned ROW logical, TRUE, parameters except class ignored, shape land within 67-98 latitude 5-38 longitude (ROW - Rest World) around existing maps India returned. class character, \"sf\" (default) \"sp\" format.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get IDEEA map with custom number of regions — get_map","text":"IDEEA map 'sf' 'sp' format","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/get_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get IDEEA map with custom number of regions — get_map","text":"","code":"library(sf) #> Linking to GEOS 3.11.2, GDAL 3.6.2, PROJ 9.2.0; sf_use_s2() is TRUE gis_sf <- get_map(nreg = 7, offshores = T) plot(gis_sf[1], key.width = lcm(4))   library(sp) #> The legacy packages maptools, rgdal, and rgeos, underpinning this package #> will retire shortly. Please refer to R-spatial evolution reports on #> https://r-spatial.org/r/2023/05/15/evolution4.html for details. #> This package is now running under evolution status 0  gis_sp <- get_map(nreg = 7, offshores = F, class = \"sp\") plot(gis_sp, col = rainbow(7)) #> Please note that rgdal will be retired during October 2023, #> plan transition to sf/stars/terra functions using GDAL and PROJ #> at your earliest convenience. #> See https://r-spatial.org/r/2023/05/15/evolution4.html and https://github.com/r-spatial/evolution #> rgdal: version: 1.6-7, (SVN revision 1203) #> Geospatial Data Abstraction Library extensions to R successfully loaded #> Loaded GDAL runtime: GDAL 3.6.2, released 2023/01/02 #> Path to GDAL shared files: C:/Users/olugo/AppData/Local/R/win-library/4.3/rgdal/gdal #>  GDAL does not use iconv for recoding strings. #> GDAL binary built with GEOS: TRUE  #> Loaded PROJ runtime: Rel. 9.2.0, March 1st, 2023, [PJ_VERSION: 920] #> Path to PROJ shared files: C:/Users/olugo/AppData/Local/R/win-library/4.3/rgdal/proj #> PROJ CDN enabled: FALSE #> Linking to sp version:1.6-1 #> To mute warnings of possible GDAL/OSR exportToProj4() degradation, #> use options(\"rgdal_show_exportToProj4_warnings\"=\"none\") before loading sp or rgdal."},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/ideea_data.html","id":null,"dir":"Reference","previous_headings":"","what":"IDEEA datasets — ideea_data","title":"IDEEA datasets — ideea_data","text":"Embedded datasets IDEEA models","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/ideea_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IDEEA datasets — ideea_data","text":"","code":"data(ideea_data)"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/ideea_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"IDEEA datasets — ideea_data","text":"list data frames: reg_tbl mapping table regions load_2019_MWh load curve region 2019 elc_consumption Historic projected electricity consumption region coal coal domestic resources region lignite lignite domestic resources region oil oil domestic resources gas natural gas domestic resources biomass biomass domestic resources generators installed power plants capacity fuel type region merra_raw_2014 MERRA2 subset 2014","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/ideea_modules.html","id":null,"dir":"Reference","previous_headings":"","what":"IDEEA model components — ideea_modules","title":"IDEEA model components — ideea_modules","text":"Model modules components","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/ideea_modules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IDEEA model components — ideea_modules","text":"","code":"ideea_modules"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/ideea_modules.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"IDEEA model components — ideea_modules","text":"list data frames: energy Primary energy supply module (see article energy) electricity Electric power sector module","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ideea-model.github.io/IDEEA.dev/index.html/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""}]
